<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Procedural on Alejandro U. Alvarez</title><link>https://aurbano.eu/tags/Procedural/</link><description>Recent content in Procedural on Alejandro U. Alvarez</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aurbano.eu/tags/Procedural/index.xml" rel="self" type="application/rss+xml"/><item><title>Flocking Behaviour Simulations</title><link>https://aurbano.eu/post/2020-02-15-flocking-simulation/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2020-02-15-flocking-simulation/</guid><description>This post details my journey learning about flocking behaviours, the mathematical models behind them, and my own implementation using WebGL. You can also see the final product before you read it if you want!
I&amp;rsquo;ve always been fascinated by flocks of birds flying in the sky creating patterns like the ones you can see in this video:
Reference material for my end goal And as usual I&amp;rsquo;ve thought, how hard can it be to recreate?</description></item><item><title>Procedural Map Generation</title><link>https://aurbano.eu/post/2020-02-08-procedural-maps/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2020-02-08-procedural-maps/</guid><description>At #socialgorithm we recently started working on a new game, let&amp;rsquo;s call it &amp;ldquo;Ant Colony&amp;rdquo; for now. It&amp;rsquo;s a bit like simplified Age of Empires, where you write the code that drives a bunch of ants, and they need to survive and ultimately be the only ones alive in the map.
We needed to generate map procedurally, which is nothing new really, but it was new to me when I started writing the code for it, so it&amp;rsquo;s been a fun opportunity to learn something new!</description></item><item><title>Nebula text: WebGL experiment</title><link>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</link><pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</guid><description>When I was doing the Tree Generator, I used dat.gui for the first time, and on their workshop they have the following text to play with:
dat.gui - This gave me the idea to render text on the canvas using particles that would seem to be gravitating around, in such a way that when seen all together you would see the text.
Example: &amp;ldquo;hey&amp;rdquo; Click for explosions For this example I set a big drag force so that the particles would settle fast and you could read the text more easily.</description></item><item><title>Procedurally generated trees in JavaScript</title><link>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</guid><description>Over the past year I've been more and more interested in HTML5 canvas, since it allows very fast development of graphical animations using JavaScript.
Another thing that has always amazed me was procedurally generated content. Check out Steven Wittens' &amp;quot;Making worlds&amp;quot;, a wonderful article on generating planets from orbit to aerial zoom.
So I decided to create a 2D tree generator in JavaScript, you can take a look at it to know exactly what I am talking about.</description></item></channel></rss>