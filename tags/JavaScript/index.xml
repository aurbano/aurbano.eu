<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Alejandro U. Alvarez</title><link>https://aurbano.eu/tags/JavaScript/</link><description>Recent content in JavaScript on Alejandro U. Alvarez</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aurbano.eu/tags/JavaScript/index.xml" rel="self" type="application/rss+xml"/><item><title>Procedural Map Generation</title><link>https://aurbano.eu/post/2020-02-08-procedural-maps/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2020-02-08-procedural-maps/</guid><description>At #socialgorithm we recently started working on a new game, let&amp;rsquo;s call it &amp;ldquo;Ant Colony&amp;rdquo; for now. It&amp;rsquo;s a bit like simplified Age of Empires, where you write the code that drives a bunch of ants, and they need to survive and ultimately be the only ones alive in the map.
Procedural Map Generator
Here are some examples of maps produced using this tool:
Grasslands with some rocks/mountains Islands Forest We need procedural map generation, which is nothing new really, but it was new to me when I started writing the code for it, so it&amp;rsquo;s been a fun opportunity to learn something new.</description></item><item><title>Using the latest front-end tech</title><link>https://aurbano.eu/post/2015-03-03-front-end-sample/</link><pubDate>Tue, 03 Mar 2015 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2015-03-03-front-end-sample/</guid><description>There are so many new technologies popping up every week on JavaScript front end ways of doing things that it becomes really hard to stay on top of everything.
I was developing a couple of front ends lately, and decided to put everything together and get a nice environment working. I basically wanted:
Dependency management (Bower) File injection (Requirejs) Both working nicely together (Grunt) MVC front end (Angularjs) It seems straight forward seeing the list this way, but it does take a while to get it running.</description></item><item><title>Making of Nebula text</title><link>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</link><pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</guid><description>When I was doing the Tree Generator, I used dat.gui for the first time, and on their workshop they have the following text to play with:
dat.gui - This gave me the idea to render text on the canvas using particles that would seem to be gravitating around, in such a way that when seen all together you would see the text.
Example: &amp;ldquo;hey&amp;rdquo; Click for explosions For this example I set a big drag force so that the particles would settle fast and you could read the text more easily.</description></item><item><title>Web Visualizer using WebGL</title><link>https://aurbano.eu/post/2014-10-10-web-visualizer-using-webgl/</link><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-10-web-visualizer-using-webgl/</guid><description>I decided to build a tool that would allow me to see how websites are related in a visual way. I&amp;rsquo;m still working on the concept but the tool is ready and working: WebVisualizer.
Building blocks In order to get this to work there were some basic building blocks I needed. Some server side and a few client side. Here is a little run through:
Client graph rendering I had some experience with the VivaGraph library, from the very talented Andrei Kashcha, so that was an obvious choice.</description></item><item><title>jQueryUI Draggable: Bring stack element to front on click</title><link>https://aurbano.eu/post/wp/2013-01-21-jqueryui-draggable-bring-stack-element-to-front-on-click/</link><pubDate>Mon, 21 Jan 2013 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2013-01-21-jqueryui-draggable-bring-stack-element-to-front-on-click/</guid><description>If you are developing window-like elements on HTML using jQueryUI Draggable, you are probably using the stack option to ensure that the dragged element will always be on top. But the actual goal would be for that element to be on top onFocus, and that means whenever the user clicks on the element.
Exploring the jqueryUI source code for the Draggable widget we can extract the function that puts the element on top of the stack and bind it onClick for example.</description></item><item><title>Procedurally generated trees in JavaScript</title><link>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</guid><description>Over the past year I've been more and more interested in HTML5 canvas, since it allows very fast development of graphical animations using JavaScript.
Another thing that has always amazed me was procedurally generated content. Check out Steven Wittens' &amp;quot;Making worlds&amp;quot;, a wonderful article on generating planets from orbit to aerial zoom.
So I decided to create a 2D tree generator in JavaScript, you can take a look at it to know exactly what I am talking about.</description></item><item><title>Perfect jQuery UI rotating tabs</title><link>https://aurbano.eu/post/wp/2009-10-20-perfect-jquery-ui-rotating-tabs/</link><pubDate>Tue, 20 Oct 2009 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2009-10-20-perfect-jquery-ui-rotating-tabs/</guid><description>Tabs are nice. They create a very elegant interface, and jQuery UI does this marvelously.
How to do that? Include the files With jQuery and jQuery UI it is dead simple. First, load the libraries, I recommend using the hosted files at Google for jQuery:
&amp;lt;script src=&amp;#34;http://jqueryjs.googlecode.com/files/jquery-x.min.js&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;path/to/jquery UI&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Remember to include also the CSS files for the UI Theme! Otherwise the tabs won't seem to work!</description></item><item><title>sIFR - Use custom fonts in your website safely</title><link>https://aurbano.eu/post/wp/2008-05-01-sirf/</link><pubDate>Thu, 01 May 2008 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2008-05-01-sirf/</guid><description>sIFR is probably one of the most amazing scripts I've seen lately. Developed by Mike Davidson and Mark Wubben, it allows you to change the fonts used in your website to custom fonts without having to worry about them in the user's computer.
How this is accomplished is actually &amp;ldquo;very simple&amp;rdquo;. First of all you need a folder with all your fonts (.ttf files), then a JavaScript file has to be called from your html pages which will first check if Flash is enabled, and then if it is it will read through the code and determine where it should insert the flash movies.</description></item></channel></rss>