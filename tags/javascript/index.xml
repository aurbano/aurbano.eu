<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>javascript on Alex's Blog</title><link>https://aurbano.eu/tags/javascript/</link><description>Recent content in javascript on Alex's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 10 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aurbano.eu/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>Web Visualizer using WebGL</title><link>https://aurbano.eu/note/2014-10-10-web-visualizer-using-webgl/</link><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/note/2014-10-10-web-visualizer-using-webgl/</guid><description>I decided to build a tool that would allow me to see how websites are related in a visual way. I'm still working on the concept but the tool is ready and working: WebVisualizer.
Building blocks In order to get this to work there were some basic building blocks I needed. Some server side and a few client side. Here is a little run through:
Client graph rendering I had some experience with the VivaGraph library, from the very talented Andrei Kashcha, so that was an obvious choice.</description></item><item><title>Procedurally generated trees in JavaScript</title><link>https://aurbano.eu/note/wp/2013-01-14-procedurally-generated-trees-in-javascript/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://aurbano.eu/note/wp/2013-01-14-procedurally-generated-trees-in-javascript/</guid><description>Over the past year I've been more and more interested in HTML5 canvas, since it allows very fast development of graphical animations using JavaScript.
Another thing that has always amazed me was procedurally generated content. Check out Steven Wittens' &amp;quot;Making worlds&amp;quot;, a wonderful article on generating planets from orbit to aerial zoom.
So I decided to create a 2D tree generator in JavaScript, you can take a look at it to know exactly what I am talking about.</description></item><item><title>Perfect jQuery UI rotating tabs</title><link>https://aurbano.eu/note/wp/2009-10-20-perfect-jquery-ui-rotating-tabs/</link><pubDate>Tue, 20 Oct 2009 00:00:00 +0000</pubDate><guid>https://aurbano.eu/note/wp/2009-10-20-perfect-jquery-ui-rotating-tabs/</guid><description>Tabs are nice. They create a very elegant interface, and jQuery UI does this marvelously, here we have a little preview of this:
Figure 1: jQuery UI Tabs How to do that? Include the files With jQuery and jQuery UI it is dead simple. First, load the libraries, I recommend using the hosted files at Google for jQuery:
&amp;lt;script src=&amp;#34;http://jqueryjs.googlecode.com/files/jquery-x.min.js&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;path/to/jquery UI&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; Remember to include also the CSS files for the UI Theme!</description></item><item><title>sIFR - Use custom fonts in your website safely</title><link>https://aurbano.eu/note/wp/2008-05-01-sirf/</link><pubDate>Thu, 01 May 2008 00:00:00 +0000</pubDate><guid>https://aurbano.eu/note/wp/2008-05-01-sirf/</guid><description>sIFR is probably one of the most amazing scripts I've seen lately. Developed by Mike Davidson and Mark Wubben, it allows you to change the fonts used in your website to custom fonts without having to worry about them in the user's computer.
How this is accomplished is actually &amp;ldquo;very simple&amp;rdquo;. First of all you need a folder with all your fonts (.ttf files), then a JavaScript file has to be called from your html pages which will first check if Flash is enabled, and then if it is it will read through the code and determine where it should insert the flash movies.</description></item></channel></rss>