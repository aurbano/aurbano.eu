[{"categories":null,"contents":"At work we have a decently sized pile of bugs in our backlog. Most of them are not business impacting or critical, so they just sit there.\nUnfortunately we\u0026rsquo;ve never had a process to handle bugs consistently - until now!\nThis may seem obvious to some, and others will probably have an even better system - I\u0026rsquo;d love to hear from you if that\u0026rsquo;s the case!\nOur new process There are two parts to it:\n How severe is a bug - this must be a simple scale where each step is well defined. When exactly do bugs get fixed.  Determining Bug Severity There must be a well defined system to calculate this, which depends on each product and team. Our use case is an internal tool used by two groups of people: us (the team building the tool), and the end users (people outside our team).\nWe\u0026rsquo;ve classified bugs as follows:\n  Critical: It prevents any type of user from performing the core business purpose of the tool. This definition was very useful because it forced us to come up with all the workflows we consider business critical.\nFor example if we were building a simple mail client, reading incoming emails and sending emails might be our core business functionality, whereas a suggestions dropdown for the \u0026ldquo;To\u0026rdquo; field might not be.\n  High: It impacts our end users, although it\u0026rsquo;s not business critical.\n  Medium: Bugs affecting us (internal users), with no known workaround.\n  Low: Bug affecting us (internal users), with a known workaround.\n  This way everyone in our team can quickly assess the complexity of our bugs. This system works well for us because it doesn\u0026rsquo;t really matter what the bug is, as long as you know who is impacted.\nWhen do we fix them? Again, this will vary by team, but we wanted to have a defined process on when to tackle this bugs. Our current approach is:\n  Critical: Fix asap. Ideally work on the fix the day it\u0026rsquo;s found, test it, and as soon as the fix is good deploy to production.\n  High: If possible, fix in the current sprint. The product owner and dev lead will decide what items get removed to make space for this.\n  Medium: Fix in the next sprint.\n  Low: These wait in our backlog. We then allocate a percentage of every sprint\u0026rsquo;s work to bug fixing. So if we decide that 10% of the work in each sprint must be bug fixes we\u0026rsquo;ll fill it with medium bugs when we have them, and then pick low severity bugs when those are fixed.\nIn general we\u0026rsquo;ve seen that low severity bugs tend to also be fairly easy to fix, so they don\u0026rsquo;t last too long in our backlog.\n  We\u0026rsquo;re now testing this approach, so I\u0026rsquo;ll update this post if I learn anything new in a few months.\n","permalink":"https://aurbano.eu/post/2020-02-04-prioritizing-bugs/","tags":["Agile"],"title":"When do you fix bugs?"},{"categories":["Random"],"contents":"I wrote this right after a phone call from my mum, asking me for her gmail password. Which she set herself last time I was with them (because she couldn\u0026rsquo;t remember the previous one). So I saved it in my password manager just in case\u0026hellip;\nThey basically have all sessions logged in on their phones and computers, and use \u0026ldquo;Forgot my password\u0026rdquo; whenever they actually need to login to anything. Because of that they end up choosing some random new password for each service every time that happens, and obviously forget it the next time they need it.\nNext time I see them I might try to get them into an actual password manager, but people from their generation don\u0026rsquo;t seem to care at all about their passwords (or maybe it\u0026rsquo;s just my family).\nIt\u0026rsquo;s an interesting problem, and I think the solution will just be to go passwordless over time, with your phone acting as your Identity Provider somehow\u0026hellip;\n","permalink":"https://aurbano.eu/post/2019-12-18-i-am-my-familys-password-manager/","tags":["Authentication"],"title":"I am my family's password manager"},{"categories":["Learning"],"contents":"I just came across a great read called \u0026ldquo;The one time I thought I understood recursion\u0026rdquo;, which talked about a developer\u0026rsquo;s first steps with Haskell.\nHe\u0026rsquo;s doing the classic \u0026ldquo;find the n-th prime\u0026rdquo; algorithm, that has a typical recursive solution. It includes a snippet that solves the problem in a way that\u0026rsquo;s just as beautiful as it is impossible to understand for me right now, without any Haskell knowledge.\nSo I\u0026rsquo;ve decided to (finally) start my Journey into Haskell by understanding how that snippet works. Please note that I know nothing of Haskell as of now! So I\u0026rsquo;m going to be learning as I go through the snippet.\n Every thing written here may be (and very likely is) wrong!\n nth :: Integral a =\u0026gt; Int -\u0026gt; Maybe a nth 0 = Nothing nth x = Just (last $ primes x) primes :: Integral a =\u0026gt; Int -\u0026gt; [a] primes n = take n $ sieve [2..] where sieve (p:xs) = p : sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0] sieve [] = [] I\u0026rsquo;ll start by trying to understand what each line does:\nnth :: Integral a =\u0026gt; Int -\u0026gt; Maybe a At a glance :: seems to be declaring a variable, which will be a function that takes an Int, and maybe? returns an Int. The maybe seems to be similar to Java\u0026rsquo;s Optional. But why the Integral a then?\nReading up on it this turns out to be way more interesting than I thought! Integral a is the argument to the function, followed by a list of potential return types. This means that in some cases the function will return an Int (the nth prime), and in other cases it might return the same as the input.\nnth 0 = Nothing Seems easy, when calling nth with 0 as the argument, we return Nothing. From the docs and SO, Nothing represents a lack of value for a Maybe XXX type. Hence the Maybe a above.\nnth x = Just (last $ primes x) After a bit of help from SO, I think I get it: For any other argument x, Just is a constructor for Maybe which \u0026ldquo;asserts\u0026rdquo; that x does have a value (or that the function on its right will not return Nothing, I\u0026rsquo;m not fully sure now), then runs the functions in the parenthesis.\nlast is obvious, it returns the last element on a list. $ is not so much. It required some additional reading to understand that it\u0026rsquo;s essentially sugar for more parenthesis, so AFAIK, the following two lines would do the same:\nnth x = Just (last $ primes x) nth x = Just (last (primes x)) The article goes to pretty scary deep places regarding the use of the $ sign, but I\u0026rsquo;m gonna leave that for future me :) For now I get what it\u0026rsquo;s doing in this context and that\u0026rsquo;s going to be enough.\nThe last thing is to call the function primes with the argument x, which seems to be defined later on (Apparently because Haskell does lazy evaluation you can define functions in any order). I assume that primes will be a function that takes one integer and returns a list of integers (primes) up to that one.\nprimes :: Integral a =\u0026gt; Int -\u0026gt; [a] The type definition for primes confirms the assumption, let\u0026rsquo;s move on to the body (I\u0026rsquo;ll show it complete first, then break it down by lines)\nprimes n = take n $ sieve [2..] where sieve (p:xs) = p : sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0] sieve [] = [] Time to roll my sleeves up, this looks like a mess! Where do I start\u0026hellip;?\nprimes n = take n $ sieve [2..] So primes is a function with one argument n, that returns take n $ sieve [2..]. Let\u0026rsquo;s see what that does:\ntake is a built-in function that takes two arguments, an integer (N) and a list, and returns the first N elements of the list (or less if the list is not long enough).\nIt\u0026rsquo;s being called with n (the argument from primes, which was actually the nth integer from the start), and $ sieve [2..] which as I have learnt should become the return value of sieve [2..].\nI\u0026rsquo;m still not sure whether sieve is built-in or defined below where it says where sieve (p:xs) =, so I\u0026rsquo;ll finish this line first. [] is an operator that creates a list (or maybe I should call it sugar for the List constructor?) and 2.. means all integers starting from 2. Ok, getting there!\nNow we move on to the definition of sieve:\nwhere sieve (p:xs) = p : sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0] where is a way to define functions based on their inputs, quite similar to what happened earlier, and after reading some documentation I\u0026rsquo;m still not 100% sure about when it\u0026rsquo;s best to be used, but I think I get what it does.\nSomething awesome that I\u0026rsquo;m realising now is the \u0026ldquo;lazy evaluation\u0026rdquo; part of Haskell. If you wrote this code in Java for example it would simply never end because we\u0026rsquo;re calling sieve with an infinite list! But thanks to Haskell\u0026rsquo;s lazy evaluation sieve [2..] doesn\u0026rsquo;t get evaluated when defined, but when it\u0026rsquo;s return value is needed. So because take n needs the first n elements of the list returned by sieve [2..], it will only evaluate until then. I\u0026rsquo;m blown away!\nThe next bit that looks odd is p:xs, my guess is that this represents an argument of type list, where the start is stored in p and the end in xs? but the list was unbounded (defined as 2..) so surely I\u0026rsquo;m missing something here (I was, I figured it out by the next paragraph). Time to read.\nOk, it turns out that p:xs is a fairly standard convention, although the typical way of writing it is x:xs. In Haskell it\u0026rsquo;s common to end list variables with an s, and use a single letter for single values. The fact that they chose p instead of x is an indication that it\u0026rsquo;s value is special - it\u0026rsquo;s a prime number (well, it should be).\nAfter reading some more, I understand that p:xs is a pattern (and patterns look AWESOME in Haskell!), which means that p is the first element, and xs is the rest of the list. For example if you needed the first two elements and then the rest, you could write p:s:xs, where p would be the first, s the second, and xs the rest.\nFor example the first time sieve runs p = 2 and xs = [3, 4, 5...].\nNow the return of the function: p : sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0].\nBased on what I\u0026rsquo;ve learned so far, this is defining a new pattern that starts with p and ends in the return value of sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0], which should end up being a list of primes in xs.\nThe argument for the recursive call to sieve: x | x \u0026lt;- xs, x `rem` p \u0026gt; 0 is what\u0026rsquo;s called list comprehension, or in other words, get a subset of the original list where each element satisfies some conditions. The syntax seems to be {return_var} | {return_var} from {list}, {condition 1}[, {condition 2}, ...].\nSo in this case it says \u0026ldquo;list of all x from xs such that x `rem` p \u0026gt; 0. And without reading up on this, I\u0026rsquo;m assuming this says where the remainder of dividing xby p is greater than 0? (Yes, that\u0026rsquo;s it)\nAnd the last line:\nsieve [] = [] It simply returns an empty list when sieve is called with an empty list.\nRecap Ok so now that I (mostly) get the syntax it\u0026rsquo;s time to have a look at the algorithm again and see if I can make sense of it.\nnth :: Integral a =\u0026gt; Int -\u0026gt; Maybe a nth 0 = Nothing nth x = Just (last $ primes x) primes :: Integral a =\u0026gt; Int -\u0026gt; [a] primes n = take n $ sieve [2..] where sieve (p:xs) = p : sieve [x | x \u0026lt;- xs, x `rem` p \u0026gt; 0] sieve [] = [] Our nth function returns the largest prime lower or equals to an integer we pass.\nIf we pass 0, we get nothing.\nIf we pass any other number, we\u0026rsquo;ll first calculate all primes up until that number and then return the last one. (Note: I just caught myself thinking in \u0026ldquo;non-lazy\u0026rdquo; style again! the sentence should actually say \u0026ldquo;we\u0026rsquo;ll calculate primes as we need them, up until the number specified\u0026rdquo;)\nIn order to calculate all primes until that number, we\u0026rsquo;ll start with a list of all integers starting by 2, and return a subset of the list starting from the next integer that is not divisible by it.\nSo if we call the function with 14, we\u0026rsquo;d expect the output to be 13. Let\u0026rsquo;s run through what happens:\nsieve [2..] // ------- // return = [2] p = 2 xs = [3..] // ------- // return = [2, 3] p = 3 xs = [5, 7, 11, 13] // ------- // return = [2, 3, 5] p = 5 xs = [7, 11, 13] // ------- // return = [2, 3, 5, 7] p = 7 xs = [11, 13] // ------- // return = [2, 3, 5, 7] p = 7 xs = [11, 13] // ------- // return = [2, 3, 5, 7, 11] p = 13 xs = [] // this list would probably have some elements, but they are no longer important return = [2, 3, 5, 7, 11, 13] Take the last element: Return 13 This was pretty cool! I\u0026rsquo;m now going to set up Haskell locally to start writing some code myself, so hopefully my Journey continues and I can post Part 2 at some point!\n","permalink":"https://aurbano.eu/post/2019-12-18-journey-into-haskell/","tags":["Haskell","Journey"],"title":"Journey into Haskell"},{"categories":["Thoughts"],"contents":"After putting this aside for a few years (3 apparently\u0026hellip; ) I finally decided to spend a weekend bringing my personal website back to life.\nI wanted a simple setup, that stores my blog on Github and publishes updates automatically. Until now I had been using Jekyll but setting it up was usually non trivial, and things keps breaking over time.\nSo this time I migrated the blog to Hugo, redesigned a template, and set up Github Actions to publish it automatically. I can now use Github\u0026rsquo;s UI to write new posts if I\u0026rsquo;m on the go, and things seem way more stable!\nActions Since my last update I\u0026rsquo;ve focused heavily on React, building several large side-projects. (I\u0026rsquo;ll talk about them here very soon). I\u0026rsquo;m starting to feel like I\u0026rsquo;m reaching a very nice setup for frontend web apps.\nI want to get back into blogging, I used to enjoy writing about little tricks I discovered, good ideas I had\u0026hellip; Even if few people read them it\u0026rsquo;s actually nice to be able to look back and see the stuff I was working on.\nMaybe I could force myself to write something once a week, at least. Even if it\u0026rsquo;s just to talk about whatever I learned that week.\nThoughts My idea for my next blog post is to talk about combining Jest Snapshot testing with a tool to tell you when your docs are out of date. I\u0026rsquo;m not 100% sure how that would work yet, but it seems like it would allow documentation for React websites to be kept in sync with them.\nI\u0026rsquo;d also like to talk about AI, I\u0026rsquo;ve read Life 3.0 by Max Tegmark recently and I can\u0026rsquo;t stop thinking about it. So hopefully I\u0026rsquo;ll start experimenting with it soon. I\u0026rsquo;d like to find a way to publish it online though, maybe WASM, WebGL rendering\u0026hellip; we\u0026rsquo;ll see!\n","permalink":"https://aurbano.eu/post/2019-12-14-another-update/","tags":["Update"],"title":"2019 Q4 Update"},{"categories":["Technical"],"contents":"Have you been tasked with generating PDF reports? If you have tried using the typical tools (iText for Java, ReportLab in Python\u0026hellip; ) you understand why it\u0026rsquo;s bad.\nImagine having to build a PDF like this:\nRectangle pagesize = new Rectangle(216f, 720f); Document document = new Document(pagesize, 36f, 72f, 108f, 180f); // step 2 PdfWriter.getInstance(document, new FileOutputStream(RESULT)); // step 3 document.open(); // step 4 document.add(new Paragraph( \u0026#34;Hello World! Hello People! \u0026#34; + \u0026#34;Hello Sky! Hello Sun! Hello Moon! Hello Stars!\u0026#34;)); // step 5 document.close(); Now add images, charts\u0026hellip; and get ready to quit your job and become a farmer.\nHTML/CSS can have many downsides, but the reality is that they are one of the easiest ways to programatically generate a document with any design we could think of.\nSo I thought that if I wanted our reports to follow the branding of our web application, we should be rendering HTML/CSS to a PDF.\nThis will even allow you to generate the PDF reports using your existing code, be it Angular/React\u0026hellip; etc.\nEnter PhantomJS Quick intro: PhantomJS is a \u0026ldquo;headless\u0026rdquo; browser, that can render a web page just like Chrome, from the command line. And it can output the website as an image or pdf.\nBenefits: You can actually run this from Java, NodeJS, Python, or whichever language that allows you to call an executable. In fact from NodeJS it would be even easier since PhantomJS runs in Node.\nSince I did this for a reporting system at work, that was built in Java, I\u0026rsquo;ll focus on that.\nYou\u0026rsquo;ll need three things to generate a report:\n PhantomJS executable JavaScript config file for PhantomJS HTML file to convert into PDF  JavaScript config file for PhantomJS The following file will configure PhantomJS to generate a standard A4 PDF, in portrait mode.\nIt will take the HTML content and the PDF output file from the CLI arguments.\nvar page = require(\u0026#39;webpage\u0026#39;).create(), system = require(\u0026#39;system\u0026#39;), fs = require(\u0026#39;fs\u0026#39;); page.settings.userAgent = \u0026#34;aurbano\u0026#34;; // The following are only required if you\u0026#39;re loading assets using file:// page.settings.localToRemoteUrlAccessEnabled = true; page.settings.webSecurityEnabled = false; page.settings.loadImages = true; page.paperSize = { format: \u0026#39;A4\u0026#39;, orientation: \u0026#39;portrait\u0026#39;, margin: { top: \u0026#34;1.5cm\u0026#34;, bottom: \u0026#34;1cm\u0026#34; }, footer: { height: \u0026#34;1cm\u0026#34;, contents: phantom.callback(function (pageNum, numPages) { return \u0026#39;\u0026#39; + \u0026#39;\u0026lt;div style=\u0026#34;margin: 0 1cm 0 1cm; font-size: 0.65em\u0026#34;\u0026gt;\u0026#39; + \u0026#39; \u0026lt;div style=\u0026#34;color: #888; padding:20px 20px 0 10px; border-top: 1px solid #ccc;\u0026#34;\u0026gt;\u0026#39; + \u0026#39; \u0026lt;span\u0026gt;REPORT FOOTER\u0026lt;/span\u0026gt; \u0026#39; + \u0026#39; \u0026lt;span style=\u0026#34;float:right\u0026#34;\u0026gt;\u0026#39; + pageNum + \u0026#39; / \u0026#39; + numPages + \u0026#39;\u0026lt;/span\u0026gt;\u0026#39; + \u0026#39; \u0026lt;/div\u0026gt;\u0026#39; + \u0026#39;\u0026lt;/div\u0026gt;\u0026#39;; }) } }; // This will fix some things that I\u0026#39;ll talk about in a second page.settings.dpi = \u0026#34;96\u0026#34;; page.content = fs.read(system.args[1]); var output = system.args[2]; window.setTimeout(function () { page.render(output, {format: \u0026#39;pdf\u0026#39;}); phantom.exit(0); }, 2000); HTML File Any file, with any contents will work just fine. To load local resources you can just use the file:// protocol.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;The title is irrelevant\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;all\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;file:///path/to/stylesheet.css\u0026#34; /\u0026gt; \u0026lt;style type=\u0026#34;text/css\u0026#34; media=\u0026#34;all\u0026#34;\u0026gt; html { margin:0; zoom: 1; /* or 0.76 for Linux */ } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Sample report\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;It works!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Executing If running this from the command line, just make sure you have NodeJS and PhantomJS installed (duh\u0026hellip; ), then run:\n$ phantomjs configFile.js htmlFile.html output.pdf If you wanted to run this programatically from Java for example, you could use:\n// Get HTML Report URL htmlFileUrl = this.getClass().getResource(\u0026#34;htmlFile.html\u0026#34;); File htmlFile = Paths.get(htmlFileUrl.toURI()).toFile(); // Get JS config file URL configFileUrl = this.getClass().getResource(\u0026#34;configFile.js\u0026#34;); File configFile = Paths.get(configFileUrl.toURI()).toFile(); // tmp pdf file for output File pdfReport = File.createTempFile(\u0026#34;report\u0026#34;, \u0026#34;.pdf\u0026#34;); ProcessBuilder renderProcess = new ProcessBuilder( \u0026#34;/path/to/phantomjs\u0026#34;, configFile.getAbsolutePath(), htmlFile.getAbsolutePath(), pdfReport.getAbsolutePath() ); Process phantom = renderProcess.start(); // you need to read phantom.getInputStream() and phantom.getErrorStream() // otherwise if they output something the process won\u0026#39;t end  int exitCode = phantom.waitFor(); if(exitCode != 0){ // report generation failed } // success! The coolest thing? If you can render it in HTML, you can render it in your report!\nThis means that now you can almost directly copy/paste from your application, you can even use AngularJS/React to generate the content\u0026hellip; The possibilities are endless.\nCaveats As of versions \u0026lt;= 2.1 PhantomJS renders differenly on Windows and Linux. I believe this is caused by different DPI settings.\nAfter hours of debugging and trying to figure out ways to fix it, I decided to use a CSS transform to adjust for the difference, you can find it commented in the HTML file. The magic number is 0.76, if you find a better solution please let me know!\n","permalink":"https://aurbano.eu/post/2016-06-21-generating-pdf-reports/","tags":["PDF","Java"],"title":"Generating Pixel Perfect PDF Reports"},{"categories":["Thoughts"],"contents":"Actions This past year I invested heavily in Angularjs - building a massive application at work (at least it feels massive to me, the front end is at about 20k LOC without dependencies).\nAt some point I realised that JS wasn\u0026rsquo;t cutting it for our size, Angularjs provided the tools to build, but not to maintain. So I decided to refactor everything into Typescript. Three weeks and many late nights later we had type safety, coding without messing things up was easy and fun again!\nThoughts Around May I started a new side project (as usual) and wanted to choose the best possible stack (as always). Angular2 would\u0026rsquo;ve been awesome, but React seems to be the \u0026ldquo;winning framework\u0026rdquo; now, and learning is always a plus right?\nOn to the server side: Java is what we\u0026rsquo;ve been using at our work project, it\u0026rsquo;s reliable and everyone knows it. \u0026ldquo;But NodeJS!!\u0026rdquo; some people would be screaming right now - yeah, I love it as well, but I wouldn\u0026rsquo;t build (at the moment) a massive system with it. Maybe with Typescript\u0026hellip; But no, I prefer the safety of mind I get when building a Java/Scala backend.\nAnd then I came across this in HN last night: Postgraphql - a project that sets up a Graphql server on top of Postgres! Seriously, I thought REST was the coolest kid on the block, but read a bit of Graphql\u0026rsquo;s docs.\n Because of multiple round-trips and over-fetching, applications built in the REST style inevitably end up building ad hoc endpoints that are superficially in the REST style. These actually couple the data to a particular view which explicitly violates one of REST\u0026rsquo;s major goals. Most REST systems of any complexity end up as a continuum of endpoints that span from “traditional” REST to ad hoc endpoints. \u0026ndash; GraphQL docs\n Having the client decide which data, which format, and what combinations (JOINS) to do with it, just makes maintainability insanely easy! (And having an easy to maintain project is the best thing, way better than sliced bread)\nI haven\u0026rsquo;t used it extensively, so maybe its implementations are flawed, but the idea is brilliant. And that\u0026rsquo;s what I care for right now. People are awesome and pull requests will fix the issues, but the base ideas aren\u0026rsquo;t fixable. So yeah, good luck documenting your REST API automatically\u0026hellip; (including authentication/authorisation, request/response formats, flows of requests, you get it)\nAnd the point is? No idea, probably that I wish everyone would just stop creating new frameworks and workflows for a second, so that we could all just step back, look at the mess we\u0026rsquo;ve done, and come up with the actual, good solution. But now I have to quote XKCD\u0026hellip;\nAt the same time I love the feeling of \u0026ldquo;mind blown\u0026rdquo; that you get when reading how the new framework does things, and it\u0026rsquo;s so obvious it\u0026rsquo;s better that you just don\u0026rsquo;t understand what the hell we were thinking before!\nMaybe the whole point of this blog will be to write about what excites me, twice a year or so, so that I can look back later on and realise how stupid hypes are\u0026hellip;\n","permalink":"https://aurbano.eu/post/2016-04-28-what-im-doing/","tags":["Update"],"title":"2016 Q1 Update"},{"categories":["Technical"],"contents":"There are so many new technologies popping up every week on JavaScript front end ways of doing things that it becomes really hard to stay on top of everything.\nI was developing a couple of front ends lately, and decided to put everything together and get a nice environment working. I basically wanted:\n Dependency management (Bower) File injection (Requirejs) Both working nicely together (Grunt) MVC front end (Angularjs)  It seems straight forward seeing the list this way, but it does take a while to get it running. After doing both I realized that the starting blocks were pretty much the same in both cases, so I took all that common code and put it on a sample website.\n  Angular Requirejs Bower Grunt   Take a look at the sample website first to see what we will be building. Following here is a guide on how it works.\nGetting started With all this setup we will avoid ideally manually downloading anything (Get a copy of Nodejs if you somehow don\u0026rsquo;t have one yet)\nFork/clone the repository and rename it to your project. Now let\u0026rsquo;s get all the dependencies:\n$ npm install $ bower install $ grunt This three steps are what power the whole thing:\n$ npm install We are using npm to get the main dependencies: Grunt and Bower mainly. In case you are new to this, npm is Nodejs\u0026rsquo; package manager.\nBower is a Nodejs package that allows us to install front-end dependencies very easily, with the added benefit of easily upgrading and tracking changes in them.\nGrunt on the other hand is the worker that puts everything together. If you find yourself doing the same task more than twice, Grunt can do that for you.\n$ bower install There is a file called bower.json that tells Bower all the dependencies we need, so that when running $ bower install it knows what to install.\nIt will fetch all those dependencies and put them inside bower_components/ so that we can use them in our website. This includes things like Bootstrap, Angularjs, Requirejs\u0026hellip;\n$ grunt Finally we call grunt with no arguments. This invokes the default task, which is the one we configured to tell Requirejs about the Bower components.\nWhat this means is that all those dependencies that Bower downloaded for us, that are in bower_components/ are still unkown to Requirejs, so Grunt takes them and puts them inside the paths of Requirejs.\nIf we take a look at the config.js file for Requirejs we\u0026rsquo;ll now see:\n//... paths: { app: \u0026#39;app\u0026#39;, requirejs: \u0026#39;../bower_components/requirejs/require\u0026#39;, angular: \u0026#39;../bower_components/angular/angular\u0026#39;, \u0026#39;angular-bootstrap\u0026#39;: \u0026#39;../bower_components/angular-bootstrap/ui-bootstrap-tpls\u0026#39;, bootstrap: \u0026#39;../bower_components/bootstrap/dist/js/bootstrap\u0026#39;, \u0026#39;angular-loader\u0026#39;: \u0026#39;../bower_components/angular-loader/angular-loader\u0026#39;, \u0026#39;angular-route\u0026#39;: \u0026#39;../bower_components/angular-route/angular-route\u0026#39;, almond: \u0026#39;../bower_components/almond/almond\u0026#39; }, //... All the ones that are located inside bower_components/ have been automatically added by Grunt. Cool huh :)\nFrom now on if we need a dependency anywhere in our files, we can use require and the shortname of the dependency to use it.\nAdding dependencies Should you need any other dependency, just run:\n$ bower install \u0026lt;dependency\u0026gt; $ grunt And it will be downloaded and added to the paths so it\u0026rsquo;s accesible.\nGetting Angularjs to work An Angularjs app needs an index.html file, and an app.js entry point. One of the best things of this approach is that we no longer need to include every single JavaScript file manually. So the file will simply be:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;assets/styles.css\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Sample app\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#34;bower_components/bootstrap/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;!--[if lt IE 9]\u0026gt; \u0026lt;script src=\u0026#34;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://oss.maxcdn.com/respond/1.4.2/respond.min.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;![endif]--\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;navbar navbar-inverse\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;navbar-header\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;navbar-brand\u0026#34; href=\u0026#34;#\u0026#34;\u0026gt;Sample web\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;div class=\u0026#34;container text-center\u0026#34; ng-view\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;bower_components/requirejs/require.js\u0026#34; data-main=\u0026#34;app/config.js\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The important part there is the require.js script tag. Using the attribute data-main we specify the Configuration file for Requirejs.\nAt the end of config.js we put the Angularjs initialization code:\nrequire([ \u0026#39;angular\u0026#39;, \u0026#39;app\u0026#39; ], function(angular, app) { console.info(\u0026#34;Sample Web initialized\u0026#34;); var $html = angular.element(document.getElementsByTagName(\u0026#39;html\u0026#39;)[0]); angular.element().ready(function() { // bootstrap the app manually  angular.bootstrap(document, [\u0026#39;app\u0026#39;]); }); }); There are other ways in which this can be done, but for the sake of simplicity we\u0026rsquo;ll just do it this way.\nAs you can see all the JavaScript files will now be wrapped with a require([], function(){}) function. The first argument in an array of dependencies for this file, the ones we installed with bower, and the second is the actual code for this page wrapped in a function that takes those dependencies as arguments.\nWith this we are ready to run our Angularjs app, at the moment it doesn\u0026rsquo;t have any functionality, I\u0026rsquo;ll improve it over the next weeks and add a proper sample application.\n","permalink":"https://aurbano.eu/post/2015-03-03-front-end-sample/","tags":["JavaScript","AngularJS"],"title":"Using the latest front-end tech"},{"categories":["Technical"],"contents":" Yes, this is outdated - I\u0026rsquo;ve now moved on to use Oh My Zsh, mostly with the default setup to keep things simple.\n I already did a post on the steps I took to set up my new macbook for development.\nAfter that post I started using Zsh more and more, and came to realize how much better it could become with some tweaking.\n  edges -    If you just want to replicate this just follow these two steps:\n Install antigen: Use this .zshrc file.   Walkthrough The first thing I recommend is using antigen. It is something like Pathogen for Vim, a configuration/plugin manager for Zsh.\nIt works great with Oh My Zsh, which should also be your first step into setting up your zsh shell.\nOnce antigen is installed the first part of the .zshrc file is setting that up and loading Oh My Zsh.\n# Antigen — A zsh plugin manager export ANTIGEN_DEFAULT_REPO_URL=https://github.com/sharat87/oh-my-zsh.git source ~/antigen.zsh # Load the oh-my-zsh\u0026#39;s library. antigen use oh-my-zsh Now load all the plugins (bundles) you want, the great thing about antigen is that you can add any plugin from any repository/url:\nantigen bundles \u0026lt;\u0026lt;EOBUNDLES lein pip gradle brew gem npm sublime python #... EOBUNDLES Extras Automaticcally list directory on cd I find this really useful, it triggers an ls whenever you cd into a directory.\n# Automatically list directory contents on `cd`. auto-ls () { ls; } chpwd_functions=( auto-ls $chpwd_functions ) History search We add the history substring plugin to enable fish style search, first add the plugin: zsh-users/zsh-history-substring-search.\nNow we can bind the search to Up/Down arrows:\n# bind UP and DOWN arrow keys zmodload zsh/terminfo bindkey \u0026#34;$terminfo[kcuu1]\u0026#34; history-substring-search-up bindkey \u0026#34;$terminfo[kcud1]\u0026#34; history-substring-search-down ### Fish-style autosuggest\nA great plugin that shows the first suggestion in light grey as suggestion as you type. It might have some small bugs but for the most part it works great.\nAdd the plugin: tarruda/zsh-autosuggestions\nSet it up:\n# Setup suggestions zle-line-init() { zle autosuggest-start } zle -N zle-line-init ","permalink":"https://aurbano.eu/post/2014-11-08-my-interesting-zsh-prompt/","tags":["MacOS","Shell"],"title":"My Interesting Zsh Prompt"},{"categories":["Technical"],"contents":"So I recently got a new Macbook Air, and after a couple of weeks of installing and configuring I finally have an initial setup I\u0026rsquo;m happy with.\nStep 1 Setup, install Yosemite, open System Preferences and change everything.\nRemove most things from the dock, change the theme to Dark.\nPlay with the trackpad gestures, didn\u0026rsquo;t understand the reason for the dashboard. Love Mission control though, I need to learn some keyboard shortcuts. I have a Spanish keyboard, so for the shortcuts alt might be opt.\n Enter renames files. cmd+space opens Spotlight. I\u0026rsquo;ve heard a lot about Alfred, but for now I don\u0026rsquo;t feel like I need it. cmd+alt+esc it\u0026rsquo;s the ctrl+alt+del of Mac, I only needed it once though. cmd+Q Actually close the current app. cmd+Arrow Right/Left for Start/End of line. Up/Down for Start/End of document.  Also, right click can be setup as two finger click. Drag and text selection with 3 fingers, I almost feel like playing piano using the Mac\u0026hellip;\n  edges - Mission Control   Step 2 Install Homebrew:\nruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34; This is the missing Mac version of apt-get, kind of.\nUpdate your packages list: brew update\nMake sure everything is fine: brew doctor, follow any recommendations.\nIf brew doesn\u0026rsquo;t work as a command add this to your bash/zsh profile:\nexport PATH=\u0026#34;/usr/local/bin:$PATH\u0026#34; Install node: brew install node\nInstall python: brew install python. It comes with setuptools and pip already :) More info here.\nInstall git: brew install git\nNow enable Keychain for Git, this is a really good feature that allows you to stop entering the user/pass on every push you do. You can also use the ssh url, but that requires you to change it if you clone using the app\u0026hellip;\ngit config --global credential.helper osxkeychain Step 3 Install xcode (App Store), it takes a while so I\u0026rsquo;ll do other things while it\u0026rsquo;s at it.\nIt turns out that installing apps downloaded from the Internet is quite simple. You\u0026rsquo;ll usually get a .dmg file, which is a disk image file (similar to .iso). They normally contain the app and a shortcut to the apps folder, drag the app there and done. If you don\u0026rsquo;t get the shortcut open finder and drag it into the Applications folder.\nSometimes you get a .pkg, they are usually installers.\nInstall Sublime Text 3, import plugins from my Windows machine. For reference I use the following:\n AngularJS: Does some autocomplete for html, javascript\u0026hellip; AutoFileName: Dropdown completion for paths, it\u0026rsquo;s slightly buggy sometimes but works fine overall. DocBlockr: Help with /** comments Emmet: You don\u0026rsquo;t understand how boring is typing html until you learn how to use Emmet. Seriously. FTPSync: I rarely use FTP any more, but this allows you to easily upload/download changes from ST. Git: I prefer an actual git console, but this displays useful information on the status bar. Jekyll: Text formatting and some completion. JsFormat: Auto formats javascript on save, and some other things. Markdown editing: Good companion for a Jekyll site, also useful if you edit Readme files. Package Control Github: Good gist support, I think it also does some other things though. LaTeXTools: I\u0026rsquo;ll expand on this later on. SublimeCodeIntel: Turn ST into more of an IDE, smart autocomplete and some other things.  Step 4 Open xcode, new playground project, take a look around: It looks really cool, but I don\u0026rsquo;t have time right now. Moving on.\nInstall Chrome. Safari works really well but all my stuff is already in Chrome. It uses more battery apparently, but I\u0026rsquo;m sure they\u0026rsquo;ll fix that soon.\nI\u0026rsquo;ll set up LaTeX now. It turns out Miktex is not available, but we have Mactex.\nI\u0026rsquo;m going to be using Sublime Text for editing, with the LaTeXTools package. I\u0026rsquo;m only using two of its features:\n cmd+B Builds as usual. cmd+L, V Open the generated pdf, I can\u0026rsquo;t get it to jump to the cursor though.  Step 5 The default Terminal looks ok, but needs a lot of work.\nI prefer Zsh over Bash, and Oh My Zsh is the best way of getting that to work. Run their custom installer:\ncurl -L http://install.ohmyz.sh | sh\nOh My Zsh is basically a set of configuration settings and plugins that make your life a lot easier. Open a new Terminal window, if zsh is not already there run chsh -s /bin/zsh.\nNow you\u0026rsquo;ll want to configure the theme and plugins, so follow these two guides:\n Chose and install a theme, I really like Avit. Browse the plugins and add the ones you like, I currently have: git, rails, ruby, brew, common-aliases, gem, npm, pip, python, rvm and sublime.  Step 6 Install the Mac Github app, it\u0026rsquo;s surprisingly worse than the Windows version though. It doesn\u0026rsquo;t feel as polished and powerful basically.\nStep 7 I installed some other apps as well, although not essential:\n Transmission: Torrent client Transmit: FTP client (not free though, but worth it) Skim: Better pdf reader, interacts very well with LaTeXTools. Caffeine: Allows the Mac to stay awake while doing work, loving the play on words. Memory Clean, Flux, Spotify, Photoshop, Final Cut Pro, Office for Mac, Skype, App Cleaner\u0026hellip;  Done for now!\n","permalink":"https://aurbano.eu/post/2014-11-03-setting-up-mac-for-development/","tags":["MacOS"],"title":"Setting up macOs for development"},{"categories":["RC"],"contents":"As you may have seen at the end of my first Tricopter post, after the crash I decided that I was going to upgrade the body to the v3 Tricopter kit on David\u0026rsquo;s new shop.\nThe new kit has shorter arms that are also hollow, so the ESC cables will be able to go through them. It also comes with a 3d printed yaw mechanism, which works much better with the servo to provide a smoother turning system.\nAssembly was quite easy, the hardest part being fitting all the cables without making a huge mess. Halfway through the build I ran out of heat shrink and I started using black tape. I also had a slight problem with the motors: the shaft extended slighly longer than David\u0026rsquo;s motor holders, so I had to add washers and then the screws were not long enough\u0026hellip;\nLong story short, I stopped the build video I was recording embarrased by the way the build was turning. In the end it didn\u0026rsquo;t turn out that bad though, and I managed to get flying.\nFlying was much more stable than with my first Tricopter. I could almost have it stop midair, the only problem left being the PID settings, I\u0026rsquo;ll get to those a bit later.\nI went to a field near my house with my dad for some flying and recording, I\u0026rsquo;ll show some of that below. Although it ended up in quite a big crash\u0026hellip; Pictures of that after the video. Since I have to rebuild it, I decided to take proper photos and video and do a better build this time.\nVideos, photos, and the new build will be up soon :)\n","permalink":"https://aurbano.eu/post/rc/2014-10-22-tricopter-version-3/","tags":["RC"],"title":"Tricopter v3 build"},{"categories":["Random"],"contents":"I just ordered a new Macbook Air, exactly when the October 16th Keynote was over (In case they presented a new one with retina display).\nSo now I can only wait for it to arrive, quite excited about this, since it means getting new technology I\u0026rsquo;m not used to. It\u0026rsquo;s a pity they don\u0026rsquo;t offer express shipping, UPS takes 7 days to get it to Spain.\nIn order to make the wait less painful I did a quick script to parse the UPS tracking page and draw the locations on Scribble Maps:\n   When it arrives I might write a little post about migrating from Win to Mac with no experience on the latter.\n","permalink":"https://aurbano.eu/post/2014-10-21-mac-shanghai-to-spain/","tags":["Update"],"title":"Mac: Shanghai to Spain"},{"categories":["Experiments"],"contents":"When I was doing the Tree Generator, I used dat.gui for the first time, and on their workshop they have the following text to play with:\n  dat.gui -    This gave me the idea to render text on the canvas using particles that would seem to be gravitating around, in such a way that when seen all together you would see the text.\nExample: \u0026ldquo;hey\u0026rdquo;    Click for explosions   For this example I set a big drag force so that the particles would settle fast and you could read the text more easily. On larger sizes it actually looks better withouth any drag force.\nDemos  Main demo: Sample demo with dat.gui controls to play with the settings. Music Nebula: Nebula instance synced with an audio track for explosions.  First steps I initially did this experiment on the canvas without any rendering engine. This has the advantage of rapid prototyping, and the disadvantage of likely performance issues. I managed to make it work quite well though, but the number of nodes it could render was limited by the browser JavaScript interpreter.\nThe basic idea is to have a number of particles gravitate towards a point, in such a way that the points represent the text:\n  edges - Points around which the particles gravitate.   This was actually trickier than it seems, because there is no built in way to get a list of coordinates like that. So I did the following:\n Create an empty canvas for processing. Using ctx.measureText find the largest font size that fits it. Use ctx.fillText to write the text, using white on black for better contrast. Read the canvas pixels line by line, looking for white pixels. When found, set up a new particle gravitating towards it.  In order to allow for different resolution settings I didn\u0026rsquo;t go pixel by pixel, instead I set up increments of resolution pixels, then calculated the average color of them, and compared that to my tolerance threshold.\nThe code for this is quite long, so I posted here the relevant parts only:\n// Find the largest font size var textSize; do { canvas.ctx.font = \u0026#34;bold \u0026#34; + content.size + \u0026#34;px sans-serif\u0026#34;; textSize = canvas.ctx.measureText(content.text); content.size++; } while (textSize.width \u0026lt; canvas.WIDTH \u0026amp;\u0026amp; content.size \u0026lt; canvas.HEIGHT); // Now sweep the canvas finding the text var pix = canvas.ctx.getImageData(0, 0, canvas.WIDTH, canvas.HEIGHT); for (var y = 0; y \u0026lt; pix.height; y += nebula.settings.resolution) { for (var x = 0; x \u0026lt; pix.width; x += nebula.settings.resolution) { // Calculate averages  var found = false, auxAvg = 0, points = 0; for (var x1 = 0; x1 \u0026lt; nebula.settings.resolution; x1++) { for (var y1 = 0; y1 \u0026lt; nebula.settings.resolution; y1++) { // I now have all needed pointers  // Get the index inside pix array  var pixIndex = ((y + y1) * pix.width + x + x1) * 4; auxAvg += (pix.data[pixIndex] + pix.data[pixIndex + 1] + pix.data[pixIndex + 2]) / 3; points++; } auxAvg = auxAvg / points; if (auxAvg \u0026gt; 0 \u0026amp;\u0026amp; auxAvg \u0026lt; 255 - (255 * nebula.settings.tolerance)) { // Found a valid point  break; } } } } With all this code I have the image before, with all the edges. Now it\u0026rsquo;s just a matter of drawing some particles in random locations, and update their position based on gravity towards the calculated points.\nHere is a live example where you can see the distance from each particle to the point where it wants to go (green), and the force (red):\n   For this example I set the drag force to 0 so that they would remain moving. Most of the particles\u0026rsquo; behavior can be changed with the settings, which allows for pretty cool effects.\nOn the demo page for Nebula you can play with these settings using dat.gui.\nInteresting uses After playing with the explosions for a while I realized it would be really interesting if I could sync them to an audio track.\nLooking around I found out that Chrome and HTML5 provide an AnalyserNode that does an FFT on the audio and gives you the frequency analysis, so I decided to hack that and Nebula together for an awesome visualization experience!\nSetting up the analyser was just too easy:\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext; // Remember to add this to the HTML: // \u0026lt;audio id=\u0026#34;explosions\u0026#34; src=\u0026#34;misc/dubstep.mp3\u0026#34; preload=\u0026#34;metadata\u0026#34;\u0026gt;\u0026lt;/audio\u0026gt; var audio = document.getElementById(\u0026#39;explosions\u0026#39;), audioCtx = new AudioContext(), analyser = audioCtx.createAnalyser(), source = audioCtx.createMediaElementSource(audio); // Connect the analyser to the source source.connect(analyser); // And then the analyser to the destination, if you don\u0026#39;t // you will analyse the audio but not hear it. analyser.connect(audioCtx.destination); analyser.smoothingTimeConstant = 0.3; // FFT \u0026#34;resolution\u0026#34;, this specifies the number of samples analyser.fftSize = 512; // Setup frequencyData to hold our information var frequencyData = new Uint8Array(analyser.frequencyBinCount); // Not necessary since I set it to autoplay // left it here in case someone copies this code. audio.play(); // There are different ways to do this, but requestAnimationFrame works great function animation() { requestAnimationFrame(animation); analyser.getByteFrequencyData(frequencyData); // And here I have the frequency data  console.log(frequencyData); } // Start the process animation(); The snippet before gives us the array frequencyData, which will contain in this case 512 integers [0, 255] representing in lay man\u0026rsquo;s terms the \u0026ldquo;volume\u0026rdquo; on each frequency.\nUsing this it\u0026rsquo;s easy to set up a function that iterates over each frequency, checks if the volume is bigger than a set threshold and if so, triggers an explosion.\nThe problem is that most songs are just centered on a low range of frequencies, so in order to have an accurate explosion on each frequency we would need a very big FFT resolution and then take only the first 300 values or so. Since that would be a bit resource intensive, and I only want an interesting visual effect I distribute the explosions randomly whenever any frequency surpases the threshold. At the moment there is no way to set a frequency range on the AnalyserNode.\nHere is the function for this:\n// This function should be called where \u0026#39;console.log\u0026#39; is in the other snippet function frequencyExplode(freqData){ var total = freqData.length; // Divide by 2 because half the data is always 0  for(var i=0; i\u0026lt;total/2; i++){ if(freqData[i] \u0026gt; musicSettings.freqThreshold){ // Random location in the x axis. Without the part after  // the + the explosions would have been exactly on the frequency  // they should, but as I said that wouldn\u0026#39;t work fine because of  // the spectral distribution of music. Will improve this over time.  var x = $(document).width() * i / (total/2) + $(document).width() * Math.random(); text.explosion(x, $(document).height()*Math.random()); } } } Turn up the volume, and take a look at the demo :)\n  $(document).ready(function(){ var text = new Nebula({ container: $('#nebulaDemo'), showDistance: false, showForce: false, showEdges: false, showNodes: true, variableLineWidth: false, resolution: 20, drag: 0.005, drawFn: 'rectangle', minRad: 5, maxRad: 9, bgColor: 0xf5f5f5, blendMode: 'NORMAL' }); text.write('hey', [0x7752FF, 0x4DA6F0]); $('#nebulaDemo').click(function(e){ text.explosion( e.pageX - $(this).offset().left, e.pageY - $(this).offset().top ); }); // ---------------- // var edges = new Nebula({ container: $('#edgesDemo'), showDistance: true, showForce: true, showEdges: true, showNodes: false, variableLineWidth: false, resolution: 20, maxSpeed: 2, drag: 0, drawFn: 'rectangle', bgColor: 0x000000, blendMode: 'NORMAL' }); edges.write('force', [0x7752FF]); });  ","permalink":"https://aurbano.eu/post/2014-10-21-making-of-nebula-text/","tags":["WebGL","JavaScript"],"title":"Making of Nebula text"},{"categories":["Experiments"],"contents":"I decided to build a tool that would allow me to see how websites are related in a visual way. I\u0026rsquo;m still working on the concept but the tool is ready and working: WebVisualizer.\nBuilding blocks In order to get this to work there were some basic building blocks I needed. Some server side and a few client side. Here is a little run through:\nClient graph rendering I had some experience with the VivaGraph library, from the very talented Andrei Kashcha, so that was an obvious choice. It allows you to render very large graphs (tested up to 50000+) using WebGL without any hassle really.\nUsing WebGL has some limitations, the main one is that it can only access same domain assets (Unless using CORS or changing the accept headers). This means we\u0026rsquo;ll need a server proxy to load the favicons for each website.\nServer I needed to setup a server, both for the image proxy and to interact with the Search APIs (they all require private keys) so I decided to go with Nodejs and deploy to Heroku through Travis.\nFor the tests I\u0026rsquo;m using mocha with should and supertest, they make testing a web server extremely easy.\nTesting the Image proxy (detailed below):\n Image proxy There were some existing npm packages to proxy requests in Nodejs, but I wanted something very simple. I set it up using Express and require:\n Search API I was going to use the usual Google Search API, but it turns out it was deprecated some years ago and will be dissapearing. They are replacing it with the Custom Search API, which unfortunately only allows 100 queries/day.\nAfter searching around for a bit I found that Bing offered 5000 queries/month, 5x the number Google allowed, so I went with Bing for this one\u0026hellip;\nYou can sign up for Bing\u0026rsquo;s Search API on the new Azure Marketplace, after which you go to your profile in order to get your Access key.\nOn my code I set the Access Key as an environment variable called bingAPIkey in order to keep it secret. When running locally use:\nbingAPIkey=Your-Key node index.js\n If you are deploying to Heroku as well remember to setup the Config Variable in the Settings tab.\n Serving Bing searches from Nodejs was quite easy after that:\nmodule.exports = function (app) { var bingAPIkey = process.env.bingAPIkey; if (!bingAPIkey) { console.error(\u0026#34;[ERROR] No API key for Bing detected, please set the \u0026#39;bingAPIkey\u0026#39; env variable.\u0026#34;); return; } var rootUri = \u0026#39;https://api.datamarket.azure.com/Bing/Search/v1\u0026#39;, auth = new Buffer([bingAPIkey, bingAPIkey].join(\u0026#39;:\u0026#39;)).toString(\u0026#39;base64\u0026#39;), request = require(\u0026#39;request\u0026#39;).defaults({ headers: { \u0026#39;Authorization\u0026#39;: \u0026#39;Basic \u0026#39; + auth } }); // Setup the service \tapp.get(\u0026#39;/search\u0026#39;, function (req, res) { var service_op = req.query.service_op || \u0026#39;Web\u0026#39;, query = req.query.query; var url = rootUri + \u0026#39;/\u0026#39; + service_op; console.log(\u0026#34;Bing Search: \u0026#34; + url + \u0026#34; -\u0026gt; \u0026#34; + query); request.get({ url: url, qs: { $format: \u0026#39;json\u0026#39;, Query: \u0026#34;\u0026#39;\u0026#34; + query + \u0026#34;\u0026#39;\u0026#34;, // Single quotes required \t} }, function (err, response, body) { if (err) { return res.status(500).send(err.message); } if (response.statusCode !== 200) { return res.status(500).send(response.body); } var results = JSON.parse(response.body); res.send(results.d.results); }); }); }; Putting it all together After all that was working I built a simple UI to display everything, it\u0026rsquo;s still a work in progress so I\u0026rsquo;ll keep adding to this post.\n","permalink":"https://aurbano.eu/post/2014-10-10-web-visualizer-using-webgl/","tags":["JavaScript","WebGL","Graphs"],"title":"Web Visualizer using WebGL"},{"categories":["Learning"],"contents":"Github just started giving out \u0026ldquo;Student packs\u0026quot;, which include quite a big list of gifts, including a 1 year license of Unreal Engine. I decided to use that to create a game and learn about game development all together.\n  Unreal Engine Browser   Step 1 At first I decided to take a look at sample games, to get an idea of the project structure. It comes with a bootstrap for most types of games, so I started with an FPS one.\nOnce open you see the actual game being rendered live on the editor. On the left you have some Modes and all the Content in your game.\nOn top the usual Save, Settings\u0026hellip; Alongside with Play, which actually turns the live render in the middle into a playable game.\nAnd finally in the right we have the 3D scene elements and the Details of the selected object. I didn\u0026rsquo;t really know where to start doing anything, so I changed some settings, moved things around, edited the map\u0026hellip;\n  Unreal Engine Browser   With this approach you quickly realize that This is hard.\nStep 2 I normally learn that way but there simply are too many new things. So new approach:\nThey apparently have a lot of YouTube playlists teaching how to do virtually everything. So I\u0026rsquo;ll start there. But if I want to structure my learning I need goals.\nForget about creating a game for now, my milestone will be to create a realistic terrain generator. In order to get there I need to learn how to create a terrain first, so I have some basics now:\n Create a realistic terrain generator  Learn how to create a terrain    I\u0026rsquo;ll keep updating this post as I progress :)\n","permalink":"https://aurbano.eu/post/2014-10-08-creating-game-unreal-engine/","tags":["Game Development","Journey"],"title":"Creating a game with Unreal Engine 4"},{"categories":["RC"],"contents":"Project After a lot of research on multirotors I decided to go with a tricopter after finding David Windestal\u0026rsquo;s videos on YouTube. He actually has a really cool blog where he writes about his projects, and used to work at FliteTest.\nI started my plan with a Word document where I wrote all I could find on tricopters, fpv, parts\u0026hellip; etc, so that when I actually decided to start I would be ready, my original list looked like this:\n  Part Quantity Price Subtotal     Tricopter body 1 20 20   Remote controller (9xr, no module) 1 50 50   TX \u0026amp; RX modules (Orange DSM2) 1 60 60   KK2.1 1 30 30   DT750 Motors 3 12 36   ESC 3 12 36   2200 mAh 3S battery 3 30 30   Servo 1 21 21   Props (Big bag) 1 6 6   Yaw mechanism 1 3 3   Cables \u0026amp; Heatshrink 1 10 10   Extras (Nuts, screws, programming card...) 1 30 30      Original list From the original list I changed a few things, it\u0026rsquo;s also missing others I included as extras.\nMost of the items were bought from Hobbyking, because they have almost everything. I bought everything I could locally, and the list doesn\u0026rsquo;t show those things.\nI ended up going for a bigger battery for flying, so now I use the 2200 mah for the 9xr, and a bigger 4500 mah for flying.\nThis photo is from the day the first box arrived:\n  Components box   Build The body I mentioned above was bought from Flitetest\u0026rsquo;s website, they have a really good quality and only cost 20$, although at the moment they might not be available.\nOne of the first problems I encountered was the wood arms. They should be 10x10mm, but I could only find 12x12, so I went with those. It turns out that the screws that I bought were just perfect for 10x10, and too short for my arms, so I decided to sand them down to size.\n  Sanded arms to fit the body   For the yaw mechanism I went with David\u0026rsquo;s design, using the plastic pieces he recommended and the tip of a fishing rod I managed to make it work. Attaching the servo was also pretty easy, since it coincidentally had the same height. Cutting the servo mounts, drilling the appropriate holes and just making the whole thing work was challenging but with patience it turned out pretty decent.\n  Yaw mechanism attached to the arm   Once this was done assembling all the parts and cables was a lot more straight forward. I still had to solder the ESC to their new battery cables, and then join all the cables in the same connector though. The only problem I had there was that once joined, the cables wouldn\u0026rsquo;t fit inside the connector, so it took a bit of time with a hammer and pliers.\nHere you can see the back arm with the ESC in place, and the battery connector in the back.\n  Back arm and battery connector   I finally wired everything together, and secured the KK2.1 to the body. I decided to keep it inside the foam box it came in, for added protection. I initially secured it with a zip tie, but now use velcro. Since it was my initial build I didn\u0026rsquo;t spend too much time arranging the cables, as you can see. On my current version I used some heat shrink tubing to tidy the design up.\n  Body ready with the KK2.1 installed   Setting up the KK2.1 and the 9xr was actually really easy, there are already plenty of tutorials on both so I won\u0026rsquo;t go into detail. The most difficult parts of the build were drilling the holes in the appropriate places and making a solid structure for the tricopter.\nAt this point I still hadn\u0026rsquo;t bothered to check the balance of motors and props, so I was expecting a lot of vibration, but I first wanted to see if it flew!\nFirst flight The actual first flight was a bit of a disaster, a motor was turning less than the others (turned out to be a faulty motor), and when I replaced it and tried again it was tipping badly to one side (never found out why though). After making sure everything was really tight and well setup I finally managed to get in the air.\nThe first actual flight was a bit shaky and absolutely terrifying, but luckily everything ended well. I took the tricopter to an empty part of my city, set everything up and went ahead. The result can be seen in the following video.\n  First crash After this flight I got myself a GoPro, and shot the following video (edited with the GoPro editor using a default template)\n  The crash happened because I flew even though the motor connectors were not 100% perfect. The left motor only worked when its connectors were in a very specific position, and even 1mm would be enough to make it stop. The flight lasted a lot longer than what\u0026rsquo;s shown on the video, and at some point they became loose and the rest you\u0026rsquo;ve seen.\nI have ordered bullet connectors now, that should be much better and provide a more solid connection.\nFuture plans David is releasing a new kit for the tricopter, that will probably improve the design greatly over my current wooden body. It will be released at 95$ so it\u0026rsquo;s quite a good price for what you get, here is a preview:\n  Future design   ","permalink":"https://aurbano.eu/post/rc/2014-09-16-tricopter-v2.5-build-and-first-flight/","tags":["RC"],"title":"Tricopter v2.5 build and first flight"},{"categories":["Technical"],"contents":"If you are developing window-like elements on HTML using jQueryUI Draggable, you are probably using the stack option to ensure that the dragged element will always be on top. But the actual goal would be for that element to be on top onFocus, and that means whenever the user clicks on the element.\nExploring the jqueryUI source code for the Draggable widget we can extract the function that puts the element on top of the stack and bind it onClick for example.\nHere is the function (Tweaked to work as a standalone function)\n elem should be the clicked element and stack should be the same you put in jQueryUI draggable\u0026rsquo;s options. If you wanted that to happen on click, you could use:\n ","permalink":"https://aurbano.eu/post/wp/2013-01-21-jqueryui-draggable-bring-stack-element-to-front-on-click/","tags":["JavaScript","jQuery"],"title":"jQueryUI Draggable: Bring stack element to front on click"},{"categories":["Experiments"],"contents":"Over the past year I've been more and more interested in HTML5 canvas, since it allows very fast development of graphical animations using JavaScript.\nAnother thing that has always amazed me was procedurally generated content. Check out Steven Wittens' \u0026quot;Making worlds\u0026quot;, a wonderful article on generating planets from orbit to aerial zoom.\nSo I decided to create a 2D tree generator in JavaScript, you can take a look at it to know exactly what I am talking about.\nBefore we move any further let me say that this article is aimed at people with experience using HTML5's canvas and JavaScript.\nPreview: \nClick anywhere to generate trees (for some reason they tend to be small when embedding like this, so click several time until you get a big one!)  The idea The goal is to have JavaScript generate 2D trees. At first I will generate only \u0026quot;naked\u0026quot; trees, with no leaves.\nCanvas doesn't really have many drawing methods, we can create lines, curves, and basic shapes. Since trees aren't really curvy but tend to suddenly turn and then go straight for a while (See inspiration below)\nInsipiration for the generator  Another requirement is that we start with a thick line, until we reach final branches which should be really thin. In order to fulfill these requirements and still use a simple method I have come up with the idea of stacking lines, as if they were rectangles. The nice thing about that is that we don't need to calculate the corners, only the initial and ending point, and if we use a very small length, stacking very thin rectangles, it will almost look line one long line that is twisting.\nGetting this to work So off we go, just for now I will test the idea with a loop that draws small segments all in a row, introducing a little variation on the next point's coordinates, with an initial width of 20 for example, and reducing it by a small quantity on each iteration. We should get a long wiggly line getting thinner until it \u0026quot;dies\u0026quot; at the end. I have extracted all useful variables to outside the function so that we can easily configure it.\nvar loss = 0.1;\t// Width loss per cycle var sleep = 10;\t// Min sleep time (For the animation) var branchLoss = 0.9;\t// % width maintained for branches var mainLoss = 0.9;\t// % width maintained after branching var speed = 0.3;\t// Movement speed var scatterRange = 5;\t// Area around point where leaf scattering should occur  // Starts a new branch from x,y. w is initial w // lifetime is the number of computed cycles function branch(x,y,dx,dy,w,lifetime){ ctx.lineWidth = w-lifetime*loss; ctx.beginPath(); ctx.moveTo(x,y); // Calculate new coords \tx = x dx; y = y dy; // Change dir \tdx = dx Math.sin(Math.random() lifetime)*speed; dy = dy Math.cos(Math.random() lifetime)*speed; // \tctx.lineTo(x,y); ctx.stroke(); if(w-lifetime*loss\u0026gt;=1) setTimeout(function(){ branch(x,y,dx,dy,w, lifetime); },sleep); } To execute we simply need to call branch(WIDTH/2,HEIGHT,0,-1,15,0), although you can change however you want the first 4 arguments. lifetime should start in 0, since it is the cycle counter. I've used the sleep variable to control how long it waits before drawing the next line, this way you get a sense of real drawing. If you set it to 0 the tree simply appears.\nAs you can see in Figure 1 the technique of stacking lines works very well, it even gives a little texture to the tree. We should now add some branches, the idea here is to treat the branches as new \u0026quot;trees\u0026quot;, thus reusing the function branch.\nIn order to generate a new branch we must wait until the tree has grown enough, branches usually start 1-2 meters above ground. Since this a recursive function we don't know much on each iteration, that's why I'm using the variable lifetime. If we use lifetime along with the current width of the tree, we can know exactly the percentage of growth, in order to start a new branch.\nAfter some testing I've ended up with this condition: w-lifetime*loss \u0026lt; 9. If that is met we will start a new branch, although that would mean that after that point is reached we will always start a new branch. To avoid that we add a little randomness by using: Math.random() \u0026gt; 0.7, supposing Math.random() returns a real random number the chances of that being true are almost 30%.\nif(w-lifetime*loss \u0026lt; 9 \u0026amp;amp;\u0026amp;amp; lifetime \u0026gt; 30 Math.random()*250){ setTimeout(function(){ branch(x,y,2*Math.sin(Math.random() lifetime),2*Math.cos(Math.random() lifetime),(w-lifetime*loss)*branchLoss,0); // When it branches, it loses a bit of width \tw *= mainLoss; },sleep*Math.random() sleep); } I have added some randomness to the direction in which branches start to grow by using a sine and cosine along with a random number and the current lifetime. That should give us a random direction from -1 to 1 in both axis. mainLoss is a coefficient that determines how much width is lost by the main branch.\nWe should now have a working tree generator, although some variable tweaking is required to get the shape right. Once I got the variables and function a little improved I moved everything to an object, so that I could use dat.gui and control the variables more easily (and also because JS people love experiments with dat.gui)\nBy now branches work fine (Figure 2), I've added a little jQuery snippet that will call the function branch whenever I click, generating a new tree at the x coordinate of the click.\nNow that it is working pretty well I have finished improving the code, and ensured that almost everything is configurable via variables controlled by dat.gui. In that sense it is a very good framework for prototyping and experimenting with your tests. I would like to use some sort of genetic algorithm to find the best combination of values for tree generation, but writing the fitness function is quite challenging in this case.\nPlease check out the final version, it has many options that are quite fun to play with. You can also browse its source code at Github.\nThe next thing I'd like to do would be to use some 3D library (probably three.js) to create a \u0026quot;forest\u0026quot;, and probably improve the realism of the generated trees.\nPlaying with the parameters of the tree generator you can generate some pretty cool things, below is simply a colorful forest, but you can end up having something similar to fireworks, or just random lines going everywhere\u0026hellip;\nTake a look at the live experiment on its repository.\n $(document).ready(function(){ console.log(\"Init Tree generator\"); var canvas = $('#bg'), container = $('#treeContainer'); // Resize the canvas to fit the container function resizeCanvas(){ canvas.attr('width',container.width()); canvas.attr('height', 300); } $(window).resize(function(){ resizeCanvas(); }); resizeCanvas(); var tree = new TreeGenerator(canvas, { fitScreen: false, bgColor: [245, 245, 245], treeColor: '#000000', spawnInterval: 1500, initialWidth: 6 }); tree.start(); canvas.click(function(e){ var parentOffset = $(this).parent().offset(); var relX = e.pageX - parentOffset.left; var relY = e.pageY - parentOffset.top; tree.branch(relX, canvas.height(), 0, -Math.random()*3, Math.random()*tree.settings.initialWidth,5,0,'#000',tree); }); });  ","permalink":"https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/","tags":["JavaScript","Procedural Generation"],"title":"Procedurally generated trees in JavaScript"},{"categories":["Thoughts"],"contents":"First of all, what do we call intelligence when talking about algorithms? Well, if we have an algorithm that is able to forecast when it is going to rain and when it will be sunny, we might call that intelligent, but it depends on some other variable, the time and effort it took for it to get those results. Thus the faster and lower number of variables our algorithm needs to return the same or even better results, the more intelligent it is.\nThat is a rule of thumb, but how do we do that?\nWell, many scientists say \u0026quot;Copy nature\u0026quot;, and that is indeed a good solution, because nature knows how to do really well optimized algorithms. I'll take simple animals to explain this, for example the ants. If we were to program ants, we would say it is too hard, but are we sure?\nHow nature did them was by \u0026quot;programming\u0026quot; the simplest possible set of rules (Apart from the moving/eating/basic functions), which put together create the complex societies we see them live in.\nSay we want to program ourselves an animal, and we want it to always be safe. Then, instead of programming complex recognition software, or advanced algorithms that determine the surroundings, why don't we try nature's approach, the simplistic approach?\nOf course we need to build some \u0026quot;complex\u0026quot; systems, for understanding certain objects, lighting conditions, wet/dry states\u0026hellip; Now, we give its algorithms a set of rules, to call them somehow:\nFirst, don't run out of battery. So it has to learn how to plug itself, or any other charging method right?\nSecond, escape from moving objects.\nThird, shade is safer.\nAnother requirement is that we give the robot the ability to store information, so it can learn what places are better and which ones are not. Now if we set it to \u0026quot;on\u0026quot; and watch what happens, the robot will cautiously start moving toward safer environments, and whenever battery runs lower, it will leave the safe place to look for a plug.\nThis sounds ok right? Now from this base we could start building better intelligence, but the base is this. We need something basic, some sort of default behavior.\nIf I have time I will build a java applet or something of the sort to test this out,\n","permalink":"https://aurbano.eu/post/wp/2009-11-22-developing-more-intelligent-algorithms/","tags":["AI"],"title":"Developing more intelligent algorithms"},{"categories":["Technical"],"contents":"Tabs are nice. They create a very elegant interface, and jQuery UI does this marvelously.\nHow to do that? Include the files With jQuery and jQuery UI it is dead simple. First, load the libraries, I recommend using the hosted files at Google for jQuery:\n\u0026lt;script src=\u0026#34;http://jqueryjs.googlecode.com/files/jquery-x.min.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;path/to/jquery UI\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Remember to include also the CSS files for the UI Theme! Otherwise the tabs won't seem to work!\nThe JavaScript: Now comes the cool part, basically we want to have tabs: But although tabs are nice, people may not realize there is more content, or they might be just too lazy to browse through it, so, why not rotate through the tabs?\njQuery UI does that by itself with a very simple command, but it is not perfect! So we need to program our tabs to rotate, unless the mouse is over them. This way when a user is looking for a link, the tab will wait!\nSo here is how this is achieved:\n$(document).ready(function(){ $(\u0026#34;#tabs-rotate\u0026#34;).tabs({ fx: { opacity: \u0026#39;toggle\u0026#39; } }).tabs(\u0026#39;rotate\u0026#39;, 3000); $(\u0026#39;#tabs-rotate\u0026#39;).hover(function(){ $(this).tabs(\u0026#39;rotate\u0026#39;, 0, false); },function(){ $(this).tabs({ fx: { opacity: \u0026#39;toggle\u0026#39; } }).tabs(\u0026#39;rotate\u0026#39;, 3000); } ); }); First we instruct jQuery UI to set up tabs in that div, and to rotate them. Then we use a hover event to control the rotation. On hover no rotation, and on out resume rotation.\nFurther actions: Now you may want to stop rotation completely when a tab is clicked. This can be done easily: First we will add a new handler for the onclick event to the tabs-rotate, which will remove rotation. But we also have to unbind the hover handler we had setup, using the unbind jQuery function:\n$(\u0026#39;#tabs\u0026#39;).click(function(){ $(this).tabs(\u0026#39;rotate\u0026#39;, 0, false); $(this).unbind(\u0026#39;hover\u0026#39;); }); See it in action You can see it working on the DJs Music homepage\n","permalink":"https://aurbano.eu/post/wp/2009-10-20-perfect-jquery-ui-rotating-tabs/","tags":["JavaScript","jQuery"],"title":"Perfect jQuery UI rotating tabs"},{"categories":["Technical"],"contents":"Audio being broadcasted via the Internet. So that means that we generate an audio stream that listeners cannot control, other than pausing and resuming.\nTo launch one we need several things, to start off, we need a server with streaming capabilities. Since setting up a streaming server might be difficult, we will use a standard radio management program. The main ones are SHOUTcast, IceCast, Live365\u0026hellip;\nI will focus on SHOUTcast, since it is the most extended among web hosts.\nRadio server: SHOUTcast First off, we need a server to host our radio. Radio servers are not the same as standard web hosting servers, since they require a static IP for the radio, and streaming capacity. Most radio servers use SHOUTcast to manage the radio, and I personally recommend it for its easy of use.\nFrom the SHOUTcast documentation:\n \u0026quot;The magic of the SHOUTcast Radio system happens inside the SHOUTcast Radio Distributed Network Audio Software (DNAS). This software runs on a server attached to your IP network with lots of bandwidth, and is responsible for receiving audio from a broadcast source, updating the SHOUTcast Radio directory with information about what the broadcaster is sending, and sending the broadcast feed to listeners\u0026quot;\n Finding a good hosting solution: There are plenty of radio hostings out there, and finding the best one is almost impossible. There are some key things that we must always take into account:\n Bitrate: This means bits per second, or kilobits normally (kbps) It represents the audio quality, and the higher the better. 128kbps should be perfect for most stations. Bandwidth: This is the same as a standard web hosting server, but you must realize that the radio will be constantly streaming audio, so a huge bandwidth will be needed. 100Gb should be the least, and 300-500Gb will be perfect. Listeners: Online radios have a simultaneous listener limit, and that is a key factor when choosing a hosting plan. I strongly recommend a minimum of 50 listeners, although if you plan on growing 100-300 should be ok to start.  Disk space and other features such as PHP or MySQL are important as well, but nothing compared to the ones above. An ideal radio hosting plan should cost between 20-50$, have 128kbps, 300-500Gb, 500Gb bandwidth limit, and 400-600 listeners.\nThe one I prefer the most is GlowHost, which offers a great solution for SHOUTcast hosting, starting with a basic package at 25$/month, and 250 listeners.\nBroadcasting The nice thing about all this: Broadcasting from your home. And it is as simple as getting a program that works with broadcasting, there are 3 main ones:\n WinAmp: (Free) A standard audio player, that will let you play music to your radio as well as talk though a mic. Virtual DJ: (Commercial) Quite more sophisticated that WinAmp, it will allow you to do more complex mixes of the music, as well as talk via the mic. SAM Broadcaster: (Commercial) Probably the most professional solution for online radios, packed with features and goodies!  If you are going to broadcast from WinAmp you will first need to install the DSP plugin.\nAlso, take into account that when prompted for name and password, you can use any name you want, and then in the password field, you must write your username : and the password (i.e. username:password)\nImportant features When setting up an online radio station it is vital to ensure that there will be something playing 24/7, so something like AutoDJ for SHOUTcast is perfect. AutoDJ will take all mp3 files in a folder you specify, and play them as a playlist any time there is no one broadcasting in your station, so it will fill up perfectly the spaces between shows and the times when there is no one available.\nIt is enabled in most radio hosts by default, and if it isn't you can normally request it free of charge. Setting it up is very easy, and it only requires having some mp3 files in a folder, that's why it is convenient to have enough disk space.\nPlaying the radio SHOUTcast and most radio software include a set of scripts that will play the radio online, as well as showing information about current song, listener number\u0026hellip; But they are not the best.\nIdeally, you will include the radio in your website using a flash player, so that you can blend it nicely in the design. For this task I recommend the JW Player.\nJW Player for online radio In order to use it you must make sure SHOUTcast is set to stream in mp3. And then go to the link \u0026quot;Setup Flash Player\u0026quot;. In the code they give you, you will find the radio address for the mp3 stream.\nWhere it says IP and PORT, the corresponding IP and PORT of your radio will appear. You can directly embed this, or customize it. In order to do so, you can use the skings in the JW Player's website, or simply create yourself one, providing you have enough knowledge of Flash.\n","permalink":"https://aurbano.eu/post/wp/2009-06-29-online-radio-setting-it-up-hosting-it/","tags":["Radio"],"title":"Online radio - Setting it up \u0026 hosting it"},{"categories":["Technical"],"contents":"What is event tracking? In simple terms, it logs events that happen on your site, for example rate a post (If you have post rating), download a file\u0026hellip; or you do some sort of JavaScript processing that you want to measure.\nSo finally, we can keep track of AJAX interactions with the server, we can log also normal POST requests that do some php processing, like posting a comment, or editing some data in our database.\nExample: Imagine we have a site where we feature some sort of mp3 downloads. And we want to track those with Analytics. In the link to the file we would put:\n\u0026lt;a href=\u0026#34;song_file.mp3\u0026#34; title=\u0026#34;Download file\u0026#34;\u0026gt;Download song\u0026lt;/a\u0026gt; As you can see we use the function _trackEvent, from the pageTracker object. This function takes 4 parameters, Category name, action name and a label and value:\n_trackEvent(category, action, optional_label, optional_value) The category can be used to store different events that are similar, for example in the category music we could use the actions Download, Listen, Rate\u0026hellip; And finally the label, that is normally used to refer to which specific object in that category you are referring to, in this case which song.\nFrom the Analytics panel Wait for a day after you install this to see the data in Google Analytics, and then go to the stats panel, go to the Content tab, then you'll see at the bottom Event Tracking.\nWell I hope you found this useful, more information on the Google API\n","permalink":"https://aurbano.eu/post/wp/2009-06-13-event-tracking-google-analytics/","tags":["Analytics"],"title":"Event tracking - Google Analytics"},{"categories":["Technical"],"contents":"This short snippet produces a \u0026ldquo;Twitter style\u0026rdquo; time difference, the idea is that it will round to the nearest time unit, and display only the integers on that unit. For example 1 minute ago, 2 weeks ago, 1 year ago\u0026hellip;\nYou can specify the word you want to appear instead of ago by setting the $ago argument to something else as well.\nI moved this code to a Github Gist, available here:\n ","permalink":"https://aurbano.eu/post/wp/2009-01-20-display-time-since-last-visit-in-php/","tags":["PHP","Time","Unix"],"title":"Display time since last visit in PHP"},{"categories":["Technical"],"contents":"This is a really good option in WordPress, yet very few know how to do it. Well the code is relatively simple, and it gives a good navigation point for users that, if they liked your article, might want to keep reading your stuff.\nIf you want to plainly display the next post after the one the user is reading, use the following function:\nnext_post_link(); Now this function has several (very useful) parameters, which are:\nnext_post_link(\u0026#39;format\u0026#39;, \u0026#39;link\u0026#39;, in_same_cat, \u0026#39;excluded_categories\u0026#39;);  Format For example bold, italics\u0026hellip; And so on, you can add here divs, p, span or anything you want to apply css classes or ids. Link To display a custom text instead of the post title, for example if you want \u0026quot;Next post\u0026quot; use:  next_post_link(\u0026#39;%link\u0026#39;, \u0026#39;Next post in category\u0026#39;, TRUE);  in_same_cat A very handy parameter if you want to display only the next post of the same category. Set to TRUE if you want it that way, or FALSE if you simply want the next post.  You can use one more parameter to exclude categories, for example:\nnext_post_link(\u0026#39;%link\u0026#39;, \u0026#39;Next post in category\u0026#39;, TRUE, \u0026#39;13\u0026#39;); And now the next post will be from the same category, unless that category is 13 (The id, check in the administration panel)\nIf you want to exclude multiple categories you'll have to use the \u0026quot;and\u0026quot; separator. It will work like this:\n'1 and 5 and 15'\nNote: If you are using WordPress 2.2, the concatenation method was a comma (','). So you would use:\n'1,5,15'\nOf course to display previous posts substitute next by previous, with everything else being the same.\nEnjoy,\n","permalink":"https://aurbano.eu/post/wp/2008-09-14-display-previous-next-posts-wordpress/","tags":["WordPress"],"title":"Display previous/next posts in single or category in WordPress"},{"categories":["Thoughts"],"contents":"This might seem strange, but the lowest bounce rate in my blog comes from Stumble Upon visitors. And this is not surprising, since I think that Stumble Upon is the most accurate way of getting your blog to your exact target audience.\nFor example in the picture above, from my Analytics reports for last month, Stumble Upon visitors' bounce rate is 47.45% less than the blog's average. Demonstrating the accurateness of its interest/channel system.\nIn case you don't know what the bounce rate is, it is something quite meaningful for a blog's success, it is the percentage of visitors that only read/watch one page/article, so every blogger's aim should be to have a very low bounce rate, which would mean that users come, read one article, like it, and stay to read more.\nGo check your stats for Stumble Upon visitors, and you'll see that what I say is completely true!\n","permalink":"https://aurbano.eu/post/wp/2008-09-14-stumble-upon-low-bounce-rate/","tags":["Analytics"],"title":"Stumble Upon Low Bounce Rate"},{"categories":["Technical"],"contents":"If you maintain a website, you will surely know how important it is to never have any spelling errors in your copy. And if you really care you will always run for sure a spell checker on all your text, but isn't that quite over work? Wouldn't it be much simpler if your browser did all the spell checking without you having to worry about anything?\nSpell check Drag this button to the bookmarks bar and you'll have it.  Well, there is a very simple way of doing so, simply copy the following javascript code and paste it into the address bar (On Google Chrome you may have to rewrite javascript:):\njavascript:document.body.contentEditable=\u0026#39;true\u0026#39;; document.designMode=\u0026#39;on\u0026#39;; void 0 If you find it useful, I recommend that you store that code as a bookmark, I call it Spell Check for example.\nNote: I'm not sure whether this will work or not on all browsers, I have only used it on Firefox. And by the way, if you want to change the language right click over some text (Once the spell check was applied) and in Languages select another one, remember that you can download any dictionary that you might need.\nThis system basically makes all the text editable, and since Firefox automatically spells checks all user input (If you set the options to do so) it will spell check the whole page !\n","permalink":"https://aurbano.eu/post/wp/2008-09-14-use-firefox-to-spell-check-your-website/","tags":["Browsers"],"title":"Use the browser to spell check your website"},{"categories":["Technical"],"contents":"Have you ever tried to access a computer's BIOS settings to find they are protected? Or maybe it was you and forgot the password. Either way don't worry since bypassing this simple password is as simple as following the following solutions:\nSolution 1 The simplest solution, although it may not work on some computers. This solution is called a keystroke backdoor, and it bypasses the password check (Meaning that you won't change it or get to know it)\nWhen prompted with the auth box, press:\nControl Shift F8 Control Shift F8 Backspace Enter  And if this worked you will enter normally the BIOS settings page. If you can't enter try a couple times to make sure or switch to the next method.\nSolution 2 Flashing the BIOS, this might be dangerous if it is the first time you do it, but it shouldn't be a problem if you follow this steps carefully.\nThe easiest method of doing this is by removing the battery and waiting a couple minutes to ensure that it has completely turned off. Since the memory is ROM (usually flash memory), in the moment you take the battery off the data will disappear. Now put the battery back in place and switch the computer ON again.\nThere shouldn't be any problem, except for the time and date (You'll have to set it again).\nYou can flash the BIOS using the jumper you'll find nearby, but it depends on the manufacturer so I won't go into detail.\nFor other types of passwords you can check ScratchDrive  for some good information and free programs, although I won't go into detail here.\n","permalink":"https://aurbano.eu/post/wp/2008-09-12-bypassflash-bios-password/","tags":["BIOS","Authentication"],"title":"Bypass/Flash BIOS password:"},{"categories":["Technical"],"contents":"Have you ever wondered how to assign an image to a certain post using WordPress? Surely there are some plugins that try to do this, and maybe they accomplish it, but probably slowing down your blog.\nWell, here is a way of doing it without slowing the blog or installing any sort of additional plugins. When you are done writing your post, upload an image to a directory that you will use for this, for example: \u0026quot;www.yoursite.com/post_images/\u0026quot;. And I recommned that you name the image something that has to do with the post, it will help you if you need to edit it.\nNow in the writing are scroll down until you see the tab \u0026quot;Custom fields\u0026quot;:\nAnd fill in the following information:\nKey: post_image Value: image_name.jpg  The key must be always the same, in this example it will be post_image. And the value will be the name of the image that we uploaded. In the example it is assigning_images.jpg\nAnd that's it for now. The next step is including this images into our template.\nAdd the image to the template: As you can see under the tab Custom Fields there is a link to the WordPress codex, where they explain the functions we'll use for this, so consult that if you have any doubts.\nSo here is the code to display the image (It must be inserted inside the Loop):\nif(get_post_meta($post-\u0026gt;ID, \u0026#39;post_image\u0026#39;,true)){ //There is an image assigned: echo \u0026#39;\u0026lt;img src=\u0026#34;http://yourblog.com/post_images/\u0026#39;.get_post_meta($post-/\u0026gt;ID,\u0026#39;. \u0026#39;post_image\u0026#39;,true).\u0026#39;\u0026#34; /\u0026gt;\u0026#39;; } Note that if you copy and paste the code before you'll have to delete a / in $post-\u0026gt;ID because WordPress is adding it automatically.\nOf course this is the most basic approach, but hopefully you will understand the method and will be able to work on it.\nAt the moment I am using it to display thumbnails on the archive excerpts (They are not live yet, I'm still testing) and it is a very easy and fast way of doing it.\nIf you ever need to edit either the image or the meta-data simply re-upload the picture or edit the post.\nCheers,\n","permalink":"https://aurbano.eu/post/wp/2008-09-11-assign-image-to-wordpress-post/","tags":["PHP","WordPress"],"title":"Easily assign an image to a post in WordPress"},{"categories":["Thoughts"],"contents":" I\u0026rsquo;ve kept updating this post, scroll down for that!\n Well, it was time for web-giant Google to jump the gap between being the world leader in providing web-based services to actually providing\u0026hellip; the web.\nToday Google launched the Beta version of Google Chrome, which will be the revolutionary browser nowadays, as Google claims. But what makes it so great? Well, Google announced in a very entertaining comic-book that it was going to provide a solution to every single problem in today's browsers, but is it true?\nI am actually writing this post from Google Chrome, to test it out, and I have to say that it is impressive, fast, smart\u0026hellip; and a very long list of good things, although it is not as intuitive as I would like it to be. We are used to browsers like Firefox, Safari\u0026hellip; and others that share a basic layout and style that Chrome has overthrown completely. Suddenly there are no \u0026quot;File\u0026quot;, \u0026quot;Edit\u0026quot;, \u0026quot;View\u0026quot; and all the usual windows tabs, there are almost no configuration options, but there is simplicity and ease instead, which combined find the perfect balance.\nThe main drawback though is the lack of Extensions or plugins. I miss Stumbling Upon the web, my Firebug, and other small things that add up to a lot\u0026hellip; Although I guess It'll be just a matter of time until they develop the extension system and main developers prepare the \u0026quot;Chrome\u0026quot; version of the add-ons.\nMy rating, if I was faced from a 0-10 choice would be around a 7. But the lack of plugins will never allow it for more. Maybe a normal user will find it perfect, but a developer and a user that spends hours a day watching for new stuff all over the web needs more than \u0026quot;The basics\u0026quot;.\n2013 Update Interesting to see my opinion at launch. I currently use Chrome on a daily basis, it offers an incredible developer console, and grew to have a very comprehensive addon collection. I\u0026rsquo;ll come back in a few more years.\n2019 Update And we\u0026rsquo;ve come full circle again\u0026hellip; I\u0026rsquo;m using Firefox now. I stayed with Google Chrome until 2018, mainly because it\u0026rsquo;s dev-tools were amazing. Then Google started doing some funky things around privacy, like logging you into Google services if you were logged into the browser.\nFirefox is now good enough to make the jump. I feel like it consumes more resources and battery, but I don\u0026rsquo;t have any data to back that up. The dev-tools are almost as good as Chrome\u0026rsquo;s (they miss little details, like WebSockets support I just realised they now support WebSockets experimentally) but for the most part they are good, it is a good browser.\nBut the main thing is the privacy. I run Firefox Developer Edition with the Multi-Account Containers + Cookie AutoDelete extensions, and it\u0026rsquo;s just perfect for me.\n","permalink":"https://aurbano.eu/post/wp/2008-09-02-google-chrome/","tags":["Browsers"],"title":"Google Chrome"},{"categories":["Technical"],"contents":"I know you are probably thinking that this will be some silly thing, but this idea that Thomas Landauer came up with is by far the best I've seen in a long time.\nHow does it work? Well the idea is relatively simple: Add CSS-hidden fields that a user won't see, but a spam-bot will fill. Then using php check if they were filled, and if they were: block the spammer!\nThe CSS would be something as simple as:\n.noshow { display:none; } The HTML form should include something like this:\n\u0026lt;label for=\u0026#34;leaveblank\u0026#34;\u0026gt;Leave this blank\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;noshow\u0026#34; id=\u0026#34;leaveblank\u0026#34; name=\u0026#34;leaveblank\u0026#34; /\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;label for=\u0026#34;dontchange\u0026#34;\u0026gt;Do not change this\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;http://\u0026#34; class=\u0026#34;noshow\u0026#34; id=\u0026#34;dontchange\u0026#34; name=\u0026#34;dontchange\u0026#34; /\u0026gt; And finally the php would be simply:\nif ($_POST[\u0026#39;leaveblank\u0026#39;] == \u0026#39;\u0026#39; \u0026amp;#038;\u0026amp;#038; $_POST[\u0026#39;dontchange\u0026#39;] == \u0026#39;http://\u0026#39;) { // accept form submission } The only possible drawback would be that some users with CSS disabled would see the \u0026quot;hidden\u0026quot; form fields, and thus would be quite puzzled.\nThe good thing is that the percentage of users with CSS disabled is so low that I wouldn't even care about that issue\u0026hellip;\nI like this idea so much that I'm writing a WP plugin to do this for sure. Just wait for a week or so and I will have version one running!\n","permalink":"https://aurbano.eu/post/wp/2008-08-23-best-unobtrusive-anti-spam-technique-not-captcha/","tags":["Captcha"],"title":"Best unobtrusive anti-spam technique (Not CAPTCHA)"},{"categories":["Technical"],"contents":"In a new website I am developing for a client I had to add the usual \u0026quot;Did you mean\u0026hellip; ?\u0026quot; in the search results for her. Si I started thinking for the easiest way to do this.\nThere are actually a lot of php functions out there to look for similar text. The most obvious one?\nsimilar_text()\n similar_text — Calculate the similarity between two strings\n You must pass 2 parameters plus an optional third. The two first are the strings to compare, and the optional one is the percentage of \u0026quot;closeness\u0026quot; you want them to have. It is quite useful, although it is too expensive in terms of time to use with huge database searches, so I wouldn't recommend it.\nThere are two other methods that might be good for some cases, and another function that is just the best. I'll show you first the best way to achieve this:\nThe Levenshtein algorithm, which basically finds the number of characters you must add, edit, or remove from a string to make it match another one. At first it doesn't sound too useful, but take a look at this example:\n// input misspelled word $input = \u0026#39;carrrot\u0026#39;; // array of words to check against $words = array(\u0026#39;apple\u0026#39;,\u0026#39;pineapple\u0026#39;,\u0026#39;banana\u0026#39;,\u0026#39;orange\u0026#39;, \u0026#39;radish\u0026#39;,\u0026#39;carrot\u0026#39;,\u0026#39;pea\u0026#39;,\u0026#39;bean\u0026#39;,\u0026#39;potato\u0026#39;); // no shortest distance found, yet $shortest = -1; // loop through words to find the closest foreach ($words as $word) { // calculate the distance between the input word, // and the current word $lev = levenshtein($input, $word); // check for an exact match if ($lev == 0) { // closest word is this one (exact match) $closest = $word; $shortest = 0; // break out of the loop; we\u0026#39;ve found an exact match break; } // if this distance is less than the next found shortest // distance, OR if a next shortest word has not yet been found if ($lev \u0026lt;= $shortest || $shortest \u0026lt; 0) { // set the closest match, and shortest distance $closest = $word; $shortest = $lev; } } echo \u0026#34;Input word: $input\\n\u0026#34;; if ($shortest == 0) { echo \u0026#34;Exact match found: $closest\\n\u0026#34;; } else { echo \u0026#34;Did you mean: $closest?\\n\u0026#34;; } This is an example where even a misspelled word can be found. It uses the Levenshtein to look for the word which is the most similar one, and then it is returned.\nThis is the output of the code before:\nInput word: carrrot Did you mean: carrot?  The use of this function is quite simple, although there are many optional parameters for more precise use. See the php.net reference for this function. The biggest problem is that you would have to run the algorithm against all words to get the actual one. I would only recommend it on a subset of words already narrowed down with a more generic approach.\nOther algorithms that could be used for this are soudex and metaphone. Soundex will create a key that is the same for all words that are pronounced in a similar way.\nFor example, the following code:\necho soundex(\u0026#39;beard\u0026#39;); echo soundex(\u0026#39;bird\u0026#39;); echo soundex(\u0026#39;bear\u0026#39;); /* * Output: * B630 * B630 * B600 */ Where beard and bird are the same. This could make suggestions fast if you have already created a column in the mysql tables with the soundex key of the tags for example, so that you could search not only for the string, but also for its soundex key\u0026hellip;\nUPDATE:\nYou can use MySQL's built in function SOUNDEX() to search both for the string as-is, or for the soundex too, to provide also misspelled words.\nAnd finally, the metaphone function, it's a variation of the soundex key that produces also a key that is the same for all words pronounced the same, but more accurately than soundex, since metaphone actually knows the rules of English pronounciation.\nThe use would be exactly the same as soundex, and if you are going to use something of the sort I would recommend it for its improved accuracy.\nBut bear in mind that both soundex and metaphone won't probably work fine in most other languages, or at least for languages with phonemes that don't exist in English.\n","permalink":"https://aurbano.eu/post/wp/2008-05-30-did-you-mean-in-php/","tags":["PHP","Soundex"],"title":"Did you mean? In php"},{"categories":["Technical"],"contents":"What I'm going to post here is a php function that will create a standard url from a user-inputted url so that any string will be converted to a functioning url.\nFirst it will convert all characters to lowercase:\n$url = strtolower($url); Now add http:// if it is not at the beggining:\nif(strncasecmp(\u0026#39;http://\u0026#39;,$url,7) !== 0){ //There is no http:// at the beginning: $url = \u0026#39;http://\u0026#39;.$url; } What strncasecmp does is it takes a string, and then a number. It then checks to see if that string is contained within the first (That second parameter) characters contain it. It returns 0 if it is found.\nSo in the example it checks to see if http:// is there, and if it is not, it adds it.\nNow strip all folders (This is optional, but here I will show how to make sure only the main domain is left\n$parts = explode(\u0026#39;/\u0026#39;,$url); if(sizeof($parts) !== 1){ //no / in the string: (No http, no ending /) $url = $parts[2]; } So now we've got something like \u0026quot;http://{user_input}/\u0026quot;.\nLet's make sure it has (or not) www. And if not, let's add it (Just for consistency)\nif(strncasecmp(\u0026#39;www.\u0026#39;,$url,4) !== 0){ //There is no www. return \u0026#39;http://www.\u0026#39;.$url.\u0026#39;/\u0026#39;; }else{ return \u0026#39;http://\u0026#39;.$url.\u0026#39;/\u0026#39;; } Now we have \u0026quot;http://www.{user input}/\u0026quot; , we are basically done!\nIf you really want to this this correctly you could check if the URL exists, but this is just a waste of bandwidth and opens a door for attacks from my point of view\u0026hellip;\nSo if you want to do this, create the following function:\nfunction url_exists($strURL) { $resURL = curl_init(); curl_setopt($resURL, CURLOPT_URL, $strURL); curl_setopt($resURL, CURLOPT_BINARYTRANSFER, 1); curl_setopt($resURL, CURLOPT_HEADERFUNCTION, \u0026#39;curlHeaderCallback\u0026#39;); curl_setopt($resURL, CURLOPT_FAILONERROR, 1); curl_exec ($resURL); $intReturnCode = curl_getinfo($resURL, CURLINFO_HTTP_CODE); curl_close ($resURL); if ($intReturnCode != 200 \u0026amp;\u0026amp; $intReturnCode != 302 \u0026amp;\u0026amp; $intReturnCode != 304) { return false; }Else{ return true ; } } And call it from our previous script:\nif(url_exists($url)) { return true; }else{ return false; } Full code now: So the whole thing would be something like this:\n//Function to make main domain from url: function url_exists($strURL) { $resURL = curl_init(); curl_setopt($resURL, CURLOPT_URL, $strURL); curl_setopt($resURL, CURLOPT_BINARYTRANSFER, 1); curl_setopt($resURL, CURLOPT_HEADERFUNCTION, \u0026#39;curlHeaderCallback\u0026#39;); curl_setopt($resURL, CURLOPT_FAILONERROR, 1); curl_exec ($resURL); $intReturnCode = curl_getinfo($resURL, CURLINFO_HTTP_CODE); curl_close ($resURL); if ($intReturnCode != 200 \u0026amp;\u0026amp; $intReturnCode != 302 \u0026amp;\u0026amp; $intReturnCode != 304) { return false; }Else{ return true ; } } //And now the function function domain($url,$checkIfExists=0){ //This function creates a url in the form http://www.domain.com/ $url = strtolower($url); if(strncasecmp(\u0026#39;http://\u0026#39;,$url,7) !== 0){ //There is no http:// at the beginning: $url = \u0026#39;http://\u0026#39;.$url; } $parts = explode(\u0026#39;/\u0026#39;,$url); if(sizeof($parts) !== 1){ //no / in the string: (No http, no ending /) $url = $parts[2]; } //Now check if the url has or not www. in it: if(strncasecmp(\u0026#39;www.\u0026#39;,$url,4) !== 0){ //There is no www. return \u0026#39;http://www.\u0026#39;.$url.\u0026#39;/\u0026#39;; }else{ return \u0026#39;http://\u0026#39;.$url.\u0026#39;/\u0026#39;; } if($checkIfExists !== 0){ //User wanted to check if exists: If(url_exists($url)) { return $url; }else{ return false; } } } ","permalink":"https://aurbano.eu/post/wp/2008-05-28-get-full-domain-from-users-url-in-php/","tags":["PHP"],"title":"Get full domain from user's URL in php"},{"categories":["Thoughts"],"contents":"Completely off topic for this blog, but at the time it is the best place to write about this. Read through the whole thing before judging what you see, then think about it, and then express your opinion.\nThe Unique Beings paradox To start off I will check with you certain easy experiments that are the base of this. We both agree that the same set of variables, done in the same order in the same way must always produce the same result. An example of this is that if we had two identical containers full of the same amount of the same water, and using a machine we dropped two identical steel balls of the same mass in the same point of the containers and we recorded each from the same angle and the same lighting we would have exactly identical results in the water, each second of one would match exactly each second of the other, until the water flattened again.\nSo following from here and using as a testing environment a simulation in a computer, identical sets of data and operations would produce identical results, which could be expanded to more complex things. So if we duplicated the brain of a rat, and the simulation of the rat was presented with a maze, exactly the same as the real rat, they would behave in the same way (Supposing that the simulated rat was duplicated successfully) So we could go further in our expansion, until we reached humans.\nCan we create a simulation with real humans? The answer is yes, although it is too complex to even think about it, since the amount of variables to take into account are too many. But my goal is to simulate humans, and the only way of doing it accurately is simplifying the task of inserting into the simulation all of the variables, so we need a common start for all humans, which we could find three. The most recent was our evolution from pre-humans, but still we have to simulate them perfectly, and that is even harder because of the lack of knowledge, so we have to keep going back. The next common event was the apparition of living beings on the Earth, back when they were monocellullar. But still we could create some sort of \u0026quot;similar\u0026quot; simulation, that wouldn't be as accurate as needed, so to do it perfectly we need *everything *to be the same, and that was the creation of the Universe, the moment in which the Universe was condensed to the simplest form, and then it expanded to be what we know today. The Big Bang. All is needed are the exact data of it, and a computer with a computational potential enough to simulate this.\nThe first thing is needed, data, is not currently available, but it will be eventually discovered.\nThe second thing that we need is a computer fast enough to calculate the Universe. At the moment not even all the computers on the Earth would be enough for this task, but there is evidence that within the next 10-30 years quantum computers will be available, the technology has already been discovered and it is being developed. Its potential is supposed to be the so great that not even a modern computer can simulate how they will behave.\nNow from here on I am supposing that the criteria before has been met, so that the simulation of the creation of the Universe has been successfully done, and all the data was exactly identical, so that the consequences are all the same. Now we should be able to run the simulation at a higher time rate than normal, so we can reach current dates fast enough.\n(Take into account that I am supposing that all data was entered exactly the same as it happened, so all things evolving from it are all the same too)\nWe could take a look at the Earth in its early years, see the complete evolution again, but this time on a computer simulation, but the past is not the interesting part, it is the present and future.\nSince all things in the Universe have grown accordingly to a set of \u0026quot;casual\u0026quot; occurrences, so has the simulation, reaching the point where humans appear. Although you might think we have the freedom to chose whatever we want, we chose exactly what our genetically-determined-brain, our past experiences, and another number of factors determine us to chose, so that in the simulation all of it would be the same.\nAt the point when we reach the present, with you and me, and the simulation (Now in the future, but imagine you are living in the moment the simulation is achieved), the simulation would recreate the moment when I propose this theory here, would recreate the moment when the simulation is started!\nSo we have another simulation starting up inside the simulation. Since it would be an infinite loop (Without going too deep into math you can see how the number of simulations approaches an infinite number, over time) there would be an infinite loop of conscious beings inside the simulations, and those beings (Merely simulations of ourselves) would think exactly as we do, so they would be reading this exactly like you, and if they knew about the simulation they would think they were the \u0026quot;originals\u0026quot;, but this has to have an origin, the ones who started the infinite loop, so we would want to check if we are indeed the originals.\nSo after a lot of thinking, we decide to alter the simulation. So in a Monday, we run the simulation until Wednesday, and we insert a tree in some common place in a city. And we all wait to see what happens. The strange thing is that when we were in Monday and we looked at the simulation of our Monday, there where two options, that we saw them (I'll follow this option later on) and we didn't see them insert the tree. So by the time we inserted the tree, they had done the same, and so did all of the infinite simulations.\nExpectantly we would wait for Wednesday to see what happened. In our simulation they found the tree we had inserted, and they had found out that they were a simulation, and what would happen if by Wednesday we did too? If we ourselves found out too that we had a tree we would also think that we were being simulated but what would the consequences of that be? What if we decided to shut down the simulation? Would the ones above us do the same? Suddenly all of the infinite simulated identical universes know they are not original, and what's more, the one that woke up without a tree knew that they were unique, that they were not a simulation. But now, the simulations would differ from reality, so the whole experiment would have served to create a parallel universe different from ours.\nAs you've seen I've supposed that all the people in the simulations could think by themselves, but if that was true, it means that other living creatures could have also reached the technology that permitted us simulate the Universe, and I mean by this that they could have done the same as us, without us knowing. So there could perfectly be an infinite amount of simulations being done at a time, without one true original universe, since there would be no way of testing with multiple simulations\u0026hellip;\nFollowing the other option now, that we saw our simulation insert the tree before we reached Monday. If that did happen though a complex paradox is reached. Imagine we are on Friday in the week before. No one has come up with the idea of inserting a tree in the simulation, but we decide to forward a bit the simulation to see what happens. Remember that the simulation is exactly the same as what would happen in our world. The result? It would be impossible for them to come up with ideas before us, because if we chose to do that on Friday, they would have done the same with their simulation, and would have come up with the same results. We have to keep in mind that all we do, they'll do it too, even if looked into their future, they will have looked into their simulation's future looping endlessly.\nThe final conclusion is that currently the probability of us belonging to a simulated Universe is so high that it is almost certain (Taking into account that the number of simulated Universes increases over time towards infinite), although we could prove ourselves unique in certain small subsystems such as the Earth. The consequences of this over us are close to none, unless a simulation can be achieved in our time, in which case we would be diving deep in time traveling, and other paradoxical problems.\nThe reasoning for all of this has been omitted, since it is based on complex quantum calculations and simulation algorithms. If any of you readers knows anything about quantum physics will find this extremely interesting, just as I do. Please comment your opinion.\nTo understand better this, you could watch this video where several quantum scientists (Gregg Braden David Icke, David Lynch, Wayne Dyer, Deepak Chopra, David Wilcock, David Icke, Michael Talbot, Gregg Braden, James J Traitz, Robert Anton Wilson, Neil Kramer, Grant Morrison, Bill Hicks) talk about this subject. The video is unfortunately no longer available\u0026hellip;\nThis article expresses a hypothesis I've been working on for some time now, and it shall not be copied without citing the source and author. Thanks to Reda Bouchami for clarifying this when I missed it.\nEnjoy all of the great things you'll have to think about after this,\nAlex\n","permalink":"https://aurbano.eu/post/wp/2008-05-20-quantum-universe-simulatio/","tags":["Physics","Philosophy"],"title":"Quantum Universe Simulation - The Unique beings paradox"},{"categories":["Technical"],"contents":"sIFR is probably one of the most amazing scripts I've seen lately. Developed by Mike Davidson and Mark Wubben, it allows you to change the fonts used in your website to custom fonts without having to worry about them in the user's computer.\nHow this is accomplished is actually \u0026ldquo;very simple\u0026rdquo;. First of all you need a folder with all your fonts (.ttf files), then a JavaScript file has to be called from your html pages which will first check if Flash is enabled, and then if it is it will read through the code and determine where it should insert the flash movies.\nThose flash movies take the font you selected and the text that the script found and create a static \u0026quot;animation\u0026quot; with the same text and size but with the new font. Since they are overlayed exactly over the original text, no change is noticed.\nThe only thing I'm afraid won't work fine is the background color. If you have a solid background it will work perfectly probably, but what if you use a textured background, like I do in this blog? I haven't tested it yet, but their test page works perfectly on solid backgrounds\u0026hellip;\nAs a piece of advice don't over-use it, it is intended only for headlines, quotes, and other small bits of text.\n Visit sIRF's homepage for more information on this subject Visit their demo page  Future planning Right after I found this tool I thought to my self, \u0026quot;I have to create a WP plugin that will automatically change selected tags or ids to themed fonts!\u0026quot;. So well, I am developing now the plugin.\nI started today so I guess it will take me no longer that this Sunday. I have about three days, considering that here in Spain we are on holidays\u0026hellip; Yea I know, Spain is always on holidays!\nUPDATE: 15-Sept-2014 The plugin was finished, released, used by quite a lot of people, and then discontinued. Back then it was quite a revolutionary idea, and it allowed designers to use complex custom fonts easily on their WordPress sites. I stopped maintaining the plugin when CSS got better and sIFR was no longer needed.\n","permalink":"https://aurbano.eu/post/wp/2008-05-01-sirf/","tags":["Flash","JavaScript"],"title":"sIFR - Use custom fonts in your website safely"},{"categories":["Technical"],"contents":"As a security tip you should always change the default table prefix \u0026quot;wp_\u0026quot;, mainly to avoid zero-day vulnerabilities (Vulnerabilities that haven't been discovered yet), or JavaScript SQL injection.\nA very good tool you could use for that purpose is the WP-Security-Scan plugin, which takes care of all your security problems, including that one.\nThe problem is that most of the times it is very hard to get it to change the prefix. Because of that you will have to do it manually.\nChanging the table prefix manually Step 1 Backup! the most important thing of all, backup, backup everything, often and early!\nStep 2 Install the \u0026quot;Maintenance mode\u0026quot; plugin, this way while you change the prefix no one will see errors in your site.\nStep 3 Chose now a very hard prefix, for this example I'm using df7s_23c_.\nChange the current prefix in wp-config.php, but you shouldn't upload it yet.\nNow start changing the table names to the new ones. (I recommend using phpMyAdmin for this, as it will make next step easier)\nStep 4 This is very important!\nThere are some rows in your new tables that need to be updated:\n Go to the former table wp_options (Now df7s_23c_options in the example) and change the following rows (It is recommended to search for \u0026quot;**%wp_%**\u0026quot; so that you get a list of the rows to edit):  wp_user_roles wp_cron_backup_tables wp_cron_backup_schedule wp_cron_backup_recipient   Now go to the former table wp_usermeta (Now df7s_23c_usermeta in the example) and change the following rows:  wp_capabilities wp_user_level wp_autosave_draft_ids    Finishing Upload the file wp-config.php if you haven't done so before, and check to see if it works.\nIf it doesn't make sure that all of the tables have been correctly renamed, and all the rows listed above. If it doesn't work yet there might be some plugins that created a table containing in it's rows the wp_ table prefix. If that is the case check all your plugin-created tables to ensure that none of the fields containt the old prefix.\nIf you still get problems replace your backup and wp-config.php and contact me through the comments of this post and I'll try to help you\n","permalink":"https://aurbano.eu/post/wp/2008-04-14-changing-wp-table-prefixes/","tags":["SQL","WordPress"],"title":"Changing WP Table prefixes"},{"categories":["Technical"],"contents":"Hello! Although this was a nice script back then, it is now very outdated. There are APIs available now that weren\u0026rsquo;t at the moment, so I decided to remove the post.\nIt basically sent GET requests via cURL in PHP to Google, and then parsed the response looking for your website. It was kind of usefull to see \u0026ldquo;quickly\u0026rdquo; how well your website ranked for several keywords.\n","permalink":"https://aurbano.eu/post/wp/2008-04-06-search-engine-position/","tags":["Tools","SEO"],"title":"SEO Tool Search Engine position checker"},{"categories":null,"contents":"My name is Alejandro U. Alvarez and I\u0026rsquo;m a passionate developer interested in web development, security, realtime/collaborative applications and tons of other stuff.\nI\u0026rsquo;m currently located in London working as a dev manager in a security team at an investment bank.\nI can be contacted via any of the social links at the top right, or via email at aluralma at gmail.\nI create things That sums up my main interest, I like making things. It tends to be software, but I do electronics, make music, websites\u0026hellip; new ideas in general.\nI also love learning different things, I read as much as possible for that, and keep on throwing myself into things I know nothing about - which sometimes works well and mostly doesn\u0026rsquo;t!\nMy software things are divided between projects, libraries, and little experiments. I used to develop one large personal project a year, but that proves very time consuming and ultimately not that useful.\nSo I focus more on libraries and experiments now (not that those are a lot more useful, but I\u0026rsquo;m able to get more things done this way).\nI really enjoy making music, skiing, radio controlled machines, and travelling around.\n","permalink":"https://aurbano.eu/about/","tags":null,"title":"About"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2009-chevismo/","tags":null,"title":"Chevismo"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2012-cloudclient/","tags":null,"title":"CloudClient"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2007-djsmusic/","tags":null,"title":"DJs Music"},{"categories":null,"contents":"I like to make things that move on the computer, and sometimes I put them online.\nAll the available ones are on my Github (link above), but I will add them to this page soon™.\n","permalink":"https://aurbano.eu/labs/","tags":null,"title":"Labs"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2013-nuophoto/","tags":null,"title":"nuophoto"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2013-photojshop/","tags":null,"title":"photojshop"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2011-quepiensas/","tags":null,"title":"QuePiensas"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/search/","tags":null,"title":"Search Results"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2017-socialgorithm/","tags":null,"title":"socialgorithm"},{"categories":null,"contents":"","permalink":"https://aurbano.eu/projects/2013-vayaconazo/","tags":null,"title":"VayaConazo"}]