<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Experiments on Alejandro U. Alvarez</title><link>https://aurbano.eu/categories/Experiments/</link><description>Recent content in Experiments on Alejandro U. Alvarez</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Oct 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://aurbano.eu/categories/Experiments/index.xml" rel="self" type="application/rss+xml"/><item><title>Nebula text: WebGL experiment</title><link>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</link><pubDate>Tue, 21 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-21-making-of-nebula-text/</guid><description>When I was doing the Tree Generator, I used dat.gui for the first time, and on their workshop they have the following text to play with:
dat.gui - This gave me the idea to render text on the canvas using particles that would seem to be gravitating around, in such a way that when seen all together you would see the text.
Example: &amp;ldquo;hey&amp;rdquo; Click for explosions For this example I set a big drag force so that the particles would settle fast and you could read the text more easily.</description></item><item><title>Web Visualizer using WebGL</title><link>https://aurbano.eu/post/2014-10-10-web-visualizer-using-webgl/</link><pubDate>Fri, 10 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-10-web-visualizer-using-webgl/</guid><description>I decided to build a tool that would allow me to see how websites are related in a visual way. I&amp;rsquo;m still working on the concept but the tool is ready and working: WebVisualizer.
Building blocks In order to get this to work there were some basic building blocks I needed. Some server side and a few client side. Here is a little run through:
Client graph rendering I had some experience with the VivaGraph library, from the very talented Andrei Kashcha, so that was an obvious choice.</description></item><item><title>Procedurally generated trees in JavaScript</title><link>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</link><pubDate>Mon, 14 Jan 2013 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/wp/2013-01-14-procedurally-generated-trees-in-javascript/</guid><description>Over the past year I've been more and more interested in HTML5 canvas, since it allows very fast development of graphical animations using JavaScript.
Another thing that has always amazed me was procedurally generated content. Check out Steven Wittens' &amp;quot;Making worlds&amp;quot;, a wonderful article on generating planets from orbit to aerial zoom.
So I decided to create a 2D tree generator in JavaScript, you can take a look at it to know exactly what I am talking about.</description></item></channel></rss>