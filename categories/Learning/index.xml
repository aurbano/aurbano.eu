<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on Alejandro U. Alvarez</title><link>https://aurbano.eu/categories/Learning/</link><description>Recent content in Learning on Alejandro U. Alvarez</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://aurbano.eu/categories/Learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Flocking Behaviour Simulations</title><link>https://aurbano.eu/post/2020-02-15-flocking-simulation/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2020-02-15-flocking-simulation/</guid><description>I&amp;rsquo;ve always been fascinated by flocks of birds flying in the sky, when they create patterns like the ones you can see in this video:
And as usual I&amp;rsquo;ve thought, how hard can it be to recreate? So off we go into the next learning adventure!
State of the Art: Boid, Vicsek, Three-Circle, Social force&amp;hellip; There is tons of research into this topic already, which is great because it should make the work a lot simpler!</description></item><item><title>Procedural Map Generation</title><link>https://aurbano.eu/post/2020-02-08-procedural-maps/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2020-02-08-procedural-maps/</guid><description>At #socialgorithm we recently started working on a new game, let&amp;rsquo;s call it &amp;ldquo;Ant Colony&amp;rdquo; for now. It&amp;rsquo;s a bit like simplified Age of Empires, where you write the code that drives a bunch of ants, and they need to survive and ultimately be the only ones alive in the map.
We needed to generate map procedurally, which is nothing new really, but it was new to me when I started writing the code for it, so it&amp;rsquo;s been a fun opportunity to learn something new!</description></item><item><title>Journey into Haskell</title><link>https://aurbano.eu/post/2019-12-18-journey-into-haskell/</link><pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2019-12-18-journey-into-haskell/</guid><description>I just came across a great read called &amp;ldquo;The one time I thought I understood recursion&amp;rdquo;, which talked about a developer&amp;rsquo;s first steps with Haskell.
He&amp;rsquo;s doing the classic &amp;ldquo;find the n-th prime&amp;rdquo; algorithm, that has a typical recursive solution. It includes a snippet that solves the problem in a way that&amp;rsquo;s just as beautiful as it is impossible to understand for me right now, without any Haskell knowledge.
So I&amp;rsquo;ve decided to (finally) start my Journey into Haskell by understanding how that snippet works.</description></item><item><title>Creating a game with Unreal Engine 4</title><link>https://aurbano.eu/post/2014-10-08-creating-game-unreal-engine/</link><pubDate>Wed, 08 Oct 2014 00:00:00 +0000</pubDate><guid>https://aurbano.eu/post/2014-10-08-creating-game-unreal-engine/</guid><description>Github just started giving out &amp;ldquo;Student packs&amp;quot;, which include quite a big list of gifts, including a 1 year license of Unreal Engine. I decided to use that to create a game and learn about game development all together.
Unreal Engine Browser Step 1 At first I decided to take a look at sample games, to get an idea of the project structure. It comes with a bootstrap for most types of games, so I started with an FPS one.</description></item></channel></rss>